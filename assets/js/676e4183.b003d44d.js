"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[93331],{10898:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),s=(n(67294),n(3905));const a={title:"Pagination"},i=void 0,o={unversionedId:"guides/pagination",id:"version-6.0/guides/pagination",title:"Pagination",description:"Paginating REST data",source:"@site/rest_versioned_docs/version-6.0/guides/pagination.md",sourceDirName:"guides",slug:"/guides/pagination",permalink:"/rest/6.0/guides/pagination",draft:!1,editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/rest/guides/pagination.md",tags:[],version:"6.0",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1667922965,formattedLastUpdatedAt:"Nov 8, 2022",frontMatter:{title:"Pagination"},sidebar:"docs",previous:{title:"Usage",permalink:"/rest/6.0/"},next:{title:"Authentication",permalink:"/rest/6.0/guides/auth"}},l={},p=[{value:"Infinite Scrolling",id:"infinite-scrolling",level:2},{value:"Tokens in Body",id:"tokens-in-body",level:2},{value:"Tokens in HTTP Headers",id:"tokens-in-http-headers",level:2},{value:"Code organization",id:"code-organization",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("head",null,(0,s.kt)("title",null,"Paginating REST data")),(0,s.kt)("h2",{id:"infinite-scrolling"},"Infinite Scrolling"),(0,s.kt)("p",null,"In case you want to append results to your existing list, rather than move to another page\n",(0,s.kt)("a",{parentName:"p",href:"/rest/6.0/api/RestEndpoint#paginated"},"RestEndpoint.paginated()")," can be used."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="api/News.ts"',title:'"api/News.ts"'},"import { Entity, createResource } from '@rest-hooks/rest';\n\nexport class News extends Entity {\n  readonly id: string | undefined = undefined;\n  readonly title = '';\n  readonly url = '';\n  readonly previewImage = '';\n\n  pk() {\n    return this.id;\n  }\n}\nconst BaseNewsResource = createResource({\n  path: '/news/:id',\n  schema: News,\n});\n// custom schema\nconst getList = BaseNewsResource.getList.extend({\n  schema: { results: [News], cursor: '' },\n});\n// this creates a pagination endpoint that will extend the getList endpoint\nconst getNextPage = getList.paginated(\n  ({ cursor, ...rest }: { cursor: string | number }) =>\n    (Object.keys(rest).length ? [rest] : []) as any,\n);\nexport const NewsResource = {\n  ...BaseNewsResource,\n  getList,\n  getNextPage,\n};\n")),(0,s.kt)("p",null,"Since UI behaviors vary widely, and implementations vary from platform (react-native or web),\nwe'll just assume a ",(0,s.kt)("inlineCode",{parentName:"p"},"Pagination")," component is built, that uses a callback to trigger next\npage fetching. On web, it is recommended to use something based on ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"},"Intersection Observers")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useSuspense, useController } from 'rest-hooks';\nimport { NewsResource } from 'api/News';\n\nfunction NewsList() {\n  const { results, cursor } = useSuspense(NewsResource.getList);\n  const controller = useController();\n\n  return (\n    <Pagination\n      onPaginate={() => controller.fetch(NewsResource.getNextPage, { cursor })}\n    >\n      <NewsList data={results} />\n    </Pagination>\n  );\n}\n")),(0,s.kt)("h2",{id:"tokens-in-body"},"Tokens in Body"),(0,s.kt)("p",null,"A common way APIs deal with pagination is the list view will return an object with both pagination information\nand the Array of results as another member."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="GET http://test.com/article/?page=abcd"',title:'"GET',"http://test.com/article/?page":'abcd"'},'{\n  "nextPage": null,\n  "prevPage": "http://test.com/article/?page=aedcba",\n  "results": [\n    {\n      "id": 5,\n      "content": "have a merry christmas",\n      "author": 2,\n      "contributors": []\n    },\n    {\n      "id": 532,\n      "content": "never again",\n      "author": 23,\n      "contributors": [5]\n    }\n  ]\n}\n')),(0,s.kt)("p",null,"To deal with our specific endpoint, we'll need to customize the ",(0,s.kt)("a",{parentName:"p",href:"/rest/6.0/api/RestEndpoint"},"RestEndpoint")," of lists to\nunderstand how to normalize the results (via schema). Be sure to provide defaults in your schema for any members\nthat aren't entities."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="api/Article.ts"',title:'"api/Article.ts"'},"import { Entity } from '@rest-hooks/rest';\nimport { User } from 'api';\n\nexport class Article extends Entity {\n  readonly id: number | undefined = undefined;\n  readonly content: string = '';\n  readonly author: number | null = null;\n  readonly contributors: number[] = [];\n\n  pk() {\n    return this.id?.toString();\n  }\n}\n\nconst BaseArticleResource = createResource({\n  urlPrefix: 'http://test.com',\n  path: '/article/:id',\n  schema: Article,\n});\nexport const ArticleResource = {\n  ...BaseArticleResource,\n  getList: BaseArticleResource.getList.extend({\n    schema: { results: [Article], nextPage: '', prevPage: '' },\n  }),\n};\n")),(0,s.kt)("p",null,"Now we can use ",(0,s.kt)("inlineCode",{parentName:"p"},"getList")," to get not only the articles, but also our ",(0,s.kt)("inlineCode",{parentName:"p"},"nextPage"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"prevPage")," values. We can use those tokens to define our pagination buttons."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ArticleList.tsx"',title:'"ArticleList.tsx"'},"import { useSuspense } from 'rest-hooks';\nimport ArticleResource from 'resources/ArticleResource';\n\nexport default function ArticleList() {\n  const {\n    results: articles,\n    nextPage,\n    prevPage,\n  } = useSuspense(ArticleResource.getList);\n  return (\n    <>\n      <div>\n        {articles.map(article => (\n          <Article key={article.pk()} article={article} />\n        ))}\n      </div>\n      {prevPage && <Link to={prevPage}>\u2039 Prev</Link>}\n      {nextPage && <Link to={nextPage}>Next \u203a</Link>}\n    </>\n  );\n}\n")),(0,s.kt)("h2",{id:"tokens-in-http-headers"},"Tokens in HTTP Headers"),(0,s.kt)("p",null,"In some cases the pagination tokens will be embeded in HTTP headers, rather than part of the payload. In this\ncase you'll need to customize the ",(0,s.kt)("a",{parentName:"p",href:"/rest/6.0/api/RestEndpoint#parseResponse"},"parseResponse()")," function\nfor ",(0,s.kt)("a",{parentName:"p",href:"/rest/6.0/api/createResource#getlist"},"getList")," so the pagination headers are included fetch object."),(0,s.kt)("p",null,"We show the custom ",(0,s.kt)("inlineCode",{parentName:"p"},"getList")," below. All other parts of the above example remain the same."),(0,s.kt)("p",null,"Pagination token is stored in the header ",(0,s.kt)("inlineCode",{parentName:"p"},"link")," for this example."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource } from '@rest-hooks/rest';\n\nexport const ArticleResource = {\n  ...BaseArticleResource,\n  getList: BaseArticleResource.getList.extend({\n    schema: { results: [Article], link: '' },\n    async parseResponse(response: Response) {\n      const results = await BaseArticleResource.getList.parseResponse(response);\n      if (\n        (response.headers && response.headers.has('link')) ||\n        Array.isArray(results)\n      ) {\n        return {\n          link: response.headers.get('link'),\n          results,\n        };\n      }\n      return results;\n    },\n  }),\n};\n")),(0,s.kt)("h2",{id:"code-organization"},"Code organization"),(0,s.kt)("p",null,"If much of your API share a similar pagination, you might\ntry a custom Endpoint class that shares this logic."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="api/PagingEndpoint.ts"',title:'"api/PagingEndpoint.ts"'},"import { RestEndpoint, type RestGenerics } from '@rest-hooks/rest';\n\nexport class PagingEndpoint<\n  O extends RestGenerics = any,\n> extends RestEndpoint<O> {\n  async parseResponse(response: Response) {\n    const results = await super.parseResponse(response);\n    if (\n      (response.headers && response.headers.has('link')) ||\n      Array.isArray(results)\n    ) {\n      return {\n        link: response.headers.get('link'),\n        results,\n      };\n    }\n    return results;\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="api/My.ts"',title:'"api/My.ts"'},"import { createResource, Entity } from '@rest-hooks/rest';\n\nimport { PagingEndpoint } from './PagingEndpoint';\n\nexport const MyResource = createResource({\n  path: '/stuff/:id',\n  schema: MyEntity,\n  Endpoint: PagingEndpoint,\n});\n")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),g=s,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);