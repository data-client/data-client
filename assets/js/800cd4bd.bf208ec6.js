/*! For license information please see 800cd4bd.bf208ec6.js.LICENSE.txt */
"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[72466],{41535:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),s=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),p=Symbol.for("react.suspense"),l=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),h=Symbol.iterator;var f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||f}function g(){}function k(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||f}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var R=k.prototype=new g;R.constructor=k,m(R,b.prototype),R.isPureReactComponent=!0;var w=Array.isArray,v=Object.prototype.hasOwnProperty,S={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var o,s={},i=null,a=null;if(null!=t)for(o in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)v.call(t,o)&&!E.hasOwnProperty(o)&&(s[o]=t[o]);var u=arguments.length-2;if(1===u)s.children=r;else if(1<u){for(var c=Array(u),p=0;p<u;p++)c[p]=arguments[p+2];s.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===s[o]&&(s[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:a,props:s,_owner:S.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function q(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,o,s,i){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var u=!1;if(null===e)u=!0;else switch(a){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===s?"."+q(u,0):s,w(i)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),I(i,t,o,"",(function(e){return e}))):null!=i&&(j(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(u=0,s=""===s?".":s+":",w(e))for(var c=0;c<e.length;c++){var p=s+q(a=e[c],c);u+=I(a,t,o,p,i)}else if(p=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof p)for(e=p.call(e),c=0;!(a=e.next()).done;)u+=I(a=a.value,t,o,p=s+q(a,c++),i);else if("object"===a)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return I(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},O={transition:null}},27378:(e,t,n)=>{n(41535)},49176:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var r=n(87462),o=(n(27378),n(3905)),s=n(38436);const i={title:"Using a custom networking library",sidebar_label:"Custom networking library"},a=void 0,u={unversionedId:"guides/custom-networking",id:"guides/custom-networking",title:"Using a custom networking library",description:"Resource.fetch() wraps the standard fetch.",source:"@site/../docs/rest/guides/custom-networking.md",sourceDirName:"guides",slug:"/guides/custom-networking",permalink:"/rest/guides/custom-networking",draft:!1,editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/rest/guides/custom-networking.md",tags:[],version:"current",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1654835498,formattedLastUpdatedAt:"Jun 10, 2022",frontMatter:{title:"Using a custom networking library",sidebar_label:"Custom networking library"},sidebar:"docs",previous:{title:"Computed Properties",permalink:"/rest/guides/computed-properties"},next:{title:"Resource",permalink:"/rest/api/resource"}},c={},p=[{value:"Fetch (default)",id:"fetch-default",level:2},{value:"Superagent",id:"superagent",level:2},{value:"Axios",id:"axios",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Resource.fetch()")," wraps the standard ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"fetch"),".\nOne key customization is ensuring every network related error thrown has a\nstatus member. This is useful in distinguishing code errors from networking errors,\nand is used in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/NetworkManager"},"NetworkManager"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SimpleResource")," can be used as an abstract class to implement custom fetch methods\nwithout including the default."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If you plan on using ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/NetworkErrorBoundary"},"NetworkErrorBoundary")," make sure\nto add a ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," member to errors, as it catches only errors with a ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," member.")),(0,o.kt)("h2",{id:"fetch-default"},"Fetch (default)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/github/fetch#installation"},"whatwg-fetch")," polyfill will be\nuseful in environments that don't support it, like node and older browsers\n(Internet Explorer). Be sure to include it in any bundles that need it."),(0,o.kt)(s.Z,{className:"language-typescript",mdxType:"CodeBlock"},"import { Endpoint } from '@rest-hooks/endpoint';\nimport type { EndpointExtraOptions, Schema } from '@rest-hooks/endpoint';\nimport { Entity } from '@rest-hooks/endpoint';\n\nimport paramsToString from './paramsToString.js';\nimport { RestEndpoint } from './types.js';\n\nclass NetworkError extends Error {\n  declare status: number;\n  declare response: Response;\n  name = 'NetworkError';\n\n  constructor(response: Response) {\n    super(\n      response.statusText || `Network response not 'ok': ${response.status}`,\n    );\n    this.status = response.status;\n    this.response = response;\n  }\n}\n\n/** Represents an entity to be retrieved from a server.\n * Typically 1:1 with a url endpoint.\n *\n * This can be a useful organization for many REST-like API patterns.\n * @see https://resthooks.io/docs/api/resource\n */\nexport default abstract class BaseResource extends Entity {\n  // typescript todo: require subclasses to implement\n  /** Used as base of url construction */\n  static readonly urlRoot: string;\n\n  static toString() {\n    return `${this.name}::${this.urlRoot}`;\n  }\n\n  /** Returns the globally unique identifier for this BaseResource */\n  static get key(): string {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (this.urlRoot === undefined) {\n        throw new Error(`urlRoot is not defined for Resource \"${this.name}\"\n\n  Resources require a 'static urlRoot' or 'static get key()' defined.\n  (See https://resthooks.io/docs/api/resource#static-urlroot-string)\n`);\n      }\n    }\n    return this.urlRoot;\n  }\n\n  /** URL to find this BaseResource */\n  declare readonly url: string;\n\n  /** Get the url for a BaseResource\n   *\n   * Default implementation conforms to common REST patterns\n   */\n  static url(urlParams: Readonly<Record<string, any>>): string {\n    if (\n      Object.prototype.hasOwnProperty.call(urlParams, 'url') &&\n      urlParams.url &&\n      typeof urlParams.url === 'string'\n    ) {\n      return urlParams.url;\n    }\n    if (this.pk(urlParams as any) !== undefined) {\n      return `${this.urlRoot.replace(/\\/$/, '')}/${this.pk(urlParams as any)}`;\n    }\n    return this.urlRoot;\n  }\n\n  /** Get the url for many BaseResources\n   *\n   * Default implementation conforms to common REST patterns\n   */\n  static listUrl(\n    searchParams: Readonly<Record<string, string | number | boolean>> = {},\n  ): string {\n    if (Object.keys(searchParams).length) {\n      return `${this.urlRoot}?${paramsToString(searchParams)}`;\n    }\n    return this.urlRoot;\n  }\n\n  /** Perform network request and resolve with HTTP Response */\n  static fetchResponse(input: RequestInfo, init: RequestInit) {\n    let options: RequestInit = init;\n    if (!options.body || typeof options.body === 'string') {\n      options = {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n      };\n    }\n    return fetch(input, options)\n      .then(response => {\n        if (!response.ok) {\n          throw new NetworkError(response);\n        }\n        return response;\n      })\n      .catch(error => {\n        // ensure CORS, network down, and parse errors are still caught by NetworkErrorBoundary\n        if (error instanceof TypeError) {\n          (error as any).status = 400;\n        }\n        throw error;\n      });\n  }\n\n  /** Perform network request and resolve with json body */\n  static fetch(input: RequestInfo, init: RequestInit) {\n    return this.fetchResponse(input, init).then((response: Response) => {\n      if (\n        !response.headers.get('content-type')?.includes('json') ||\n        response.status === 204\n      )\n        return response.text();\n      return response.json().catch(error => {\n        error.status = 400;\n        throw error;\n      });\n    });\n  }\n\n  /** Init options for fetch - run at fetch */\n  static getFetchInit(init: Readonly<RequestInit>): RequestInit {\n    return init;\n  }\n\n  /** Get the request options for this BaseResource */\n  static getEndpointExtra(): EndpointExtraOptions | undefined {\n    return {\n      errorPolicy: error =>\n        error.status >= 500 ? ('soft' as const) : undefined,\n    };\n  }\n\n  /** Field where endpoint cache is stored */\n  protected static readonly cacheSymbol = Symbol('memo');\n\n  /** Used to memoize endpoint methods\n   *\n   * Relies on existance of runInit() member.\n   */\n  protected static memo<T extends { extend: (...args: any) => any }>(\n    name: string,\n    construct: () => T,\n  ): T {\n    if (!Object.hasOwnProperty.call(this, this.cacheSymbol)) {\n      (this as any)[this.cacheSymbol] = {};\n    }\n    const cache = (this as any)[this.cacheSymbol];\n    if (!(name in cache)) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const resource: any = this;\n      cache[name] = construct().extend({\n        get name() {\n          return `${resource.name}.${name.replace(/#/, '')}`;\n        },\n      });\n    }\n    return cache[name] as T;\n  }\n\n  /** Base endpoint that uses all the hooks provided by Resource  */\n  protected static endpoint(): RestEndpoint<\n    (this: RestEndpoint, params: any) => Promise<any>,\n    Schema | undefined,\n    undefined\n  > {\n    return this.memo('#endpoint', () => {\n      // eslint-disable-next-line\n      const resource = this;\n      const instanceFetch = this.fetch.bind(this);\n      const url = this.url.bind(this);\n\n      return new Endpoint(\n        function (params: any) {\n          return instanceFetch(this.url(params), this.getFetchInit());\n        },\n        {\n          ...this.getEndpointExtra(),\n          key: function (this: any, params: any) {\n            return `${this.method} ${this.url(params)}`;\n          },\n          url,\n          fetchInit: {} as RequestInit,\n          getFetchInit(this: any, body?: any) {\n            if (isPojo(body)) {\n              body = JSON.stringify(body);\n            }\n            return resource.getFetchInit({\n              ...this.fetchInit,\n              method: this.method,\n              signal: this.signal,\n              body,\n            });\n          },\n          method: 'GET',\n          signal: undefined as AbortSignal | undefined,\n        },\n      );\n    });\n  }\n\n  /** Base endpoint but for sideEffects */\n  protected static endpointMutate(): RestEndpoint<\n    (this: RestEndpoint, params: any, body?: any) => Promise<any>,\n    Schema | undefined,\n    true\n  > {\n    const instanceFetch = this.fetch.bind(this);\n    const endpoint = this.endpoint();\n    return this.memo('#endpointMutate', () =>\n      endpoint.extend({\n        fetch(this: RestEndpoint, params: any, body: any) {\n          return instanceFetch(this.url(params), this.getFetchInit(body));\n        },\n        sideEffect: true,\n        method: 'POST',\n      }),\n    );\n  }\n\n  static {\n    Object.defineProperty(this.prototype, 'url', {\n      get(): string {\n        // typescript thinks constructor is just a function\n        const Static = this.constructor as typeof BaseResource;\n        return Static.url(this);\n      },\n      set(v: string) {\n        Object.defineProperty(this, 'url', {\n          value: v,\n          writable: true,\n          enumerable: true,\n        });\n      },\n    });\n  }\n}\n\nconst proto = Object.prototype;\nconst gpo = Object.getPrototypeOf;\n\nfunction isPojo(obj: unknown): obj is Record<string, any> {\n  if (obj === null || typeof obj !== 'object') {\n    return false;\n  }\n  return gpo(obj) === proto;\n}\n"),(0,o.kt)("h2",{id:"superagent"},"Superagent"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://visionmedia.github.io/superagent/"},"Superagent")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource, Method } from '@rest-hooks/rest';\nimport type { SuperAgentRequest } from 'superagent';\n\nconst ResourceError = `JSON expected but not returned from API`;\n\n/**\n * Represents an entity to be retrieved from a server.\n * Typically 1:1 with a url endpoint.\n */\nexport default abstract class SuperResource extends Resource {\n  /** A function to mutate all requests for fetch */\n  static fetchPlugin?: (request: SuperAgentRequest) => SuperAgentRequest;\n\n  /** Perform network request and resolve with json body */\n  static async fetch(\n    input: RequestInfo, init: RequestInit\n  ) {\n    let req = request[init.method](input).on('error', () => {});\n    if (this.fetchPlugin) req = req.use(this.fetchPlugin);\n    if (init.body) req = req.send(init.body);\n    return req.then(res => {\n      if (isInvalidResponse(res)) {\n        throw new Error(ResourceError);\n      }\n      return res.body;\n    });\n  }\n}\n\nexport const isInvalidResponse = (res: request.Response): boolean => {\n  // Empty is only valid when no response is expect (204)\n  const resEmptyIsExpected = res.text === '' && res.status === 204;\n  const resBodyEmpty = Object.keys(res.body).length === 0;\n  return !(res.type.includes('json') || resEmptyIsExpected) && resBodyEmpty;\n};\n")),(0,o.kt)("h2",{id:"axios"},"Axios"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"Axios")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource, Method } from '@rest-hooks/rest';\nimport axios from 'axios';\n\nexport default abstract class AxiosResource extends Resource {\n  /** Perform network request and resolve with json body */\n  static async fetch(\n    input: RequestInfo, init: RequestInit\n  ) {\n    return await axios[init.method](input, init.body);\n  }\n}\n")))}d.isMDXComponent=!0},56922:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),o=n(5870);const s={React:r,...r,...o}}}]);