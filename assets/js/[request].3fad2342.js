(self.webpackChunk=self.webpackChunk||[]).push([[26750],{64511:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t(67294),i=t(49544),a=t(45440);function o(){return r.createElement(r.Fragment,null,r.createElement(i.i5,null),r.createElement(i.IF,{className:a.Z.playgroundError}))}},47550:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>N});var r=t(87462),i=t(49544),a=t(67294),o=t(4391),s=t(12171),d=t(56265),u=t(78357),l=t(56855),c=t(62451),m=t(70794),f=t(86429),p=t(67288);class h extends d.Z{constructor(){super(...arguments),this.id=0}pk(){return`${this.id}`}}class g extends h{constructor(){super(...arguments),this.userId=0,this.title="",this.completed=!1,this.updatedAt=0}static useIncoming(e,n,t,r){return void 0===t.updatedAt||t.updatedAt<=r.updatedAt}}class b extends f.Z{getRequestInit(e){return e&&(e={...e,updatedAt:Date.now()}),super.getRequestInit.call(this,e)}}const T=function(e){let{path:n,schema:t,Endpoint:r=f.Z}=e;const i=(0,p.Z)({path:n,schema:t,Endpoint:r}),a=i.partialUpdate.extend({fetch:async function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return{...await i.partialUpdate.call(this,...n),id:n[0].id}}});return{...i,partialUpdate:a,create:i.create.extend({fetch:async function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return{...await i.create.call(this,...n),id:n[n.length-1].id}}})}}({path:"https\\://jsonplaceholder.typicode.com/todos/:id",schema:g,Endpoint:b}),y={...T,partialUpdate:T.partialUpdate.extend({getOptimisticResponse:(e,n,t)=>({id:n.id,...e.getResponse(T.get,{id:n.id}).data,...t,updatedAt:e.fetchedAt})}),create:T.create.extend({getOptimisticResponse:(e,n)=>({...n,updatedAt:e.fetchedAt}),update:e=>({[T.getList.key()]:function(n){return void 0===n&&(n=[]),[...n,e]}})}),delete:T.delete.extend({getOptimisticResponse:(e,n)=>({...n,updatedAt:e.fetchedAt})})};var E=t(64146),M=t(82026),v=t(45440);var L=t(51523),H=t(55423);function R(e){return(0,H.transpileModule)(e.replaceAll(/^(import.+$|export )/gm,""),{compilerOptions:{module:H.ModuleKind.ESNext,target:H.ScriptTarget.ES2017,jsx:H.JsxEmit.React,skipLibCheck:!0}}).outputText}class x extends d.Z{constructor(){super(...arguments),this.id=""}pk(){return this.id}}x.schema={updatedAt:Date};const S=new o.Z((e=>{let{id:n}=e;return new Promise((e=>{setTimeout((()=>e({id:n,updatedAt:(new Date).toISOString()})),150)}))}),{schema:x});const A={...y,getList:y.getList.extend({process:e=>e.slice(0,7)})},P={...s,...u,...c,...l,randomFloatInRange:function(e,n,t){const r=(Math.random()*(n-e)+e).toFixed(t);return parseFloat(r)},mockFetch:function(e,n,t){void 0===t&&(t=150);const r=function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return new Promise((n=>setTimeout((()=>n(e(...r))),t)))};return n&&Object.defineProperty(r,"name",{value:n,writable:!1}),r},BigNumber:m.Z,lastUpdated:S,TimedEntity:x,CurrentTime:function(){const[e,n]=(0,a.useState)((()=>new Date));return(0,a.useEffect)((()=>{const e=setInterval((()=>n(new Date)));return()=>clearInterval(e)}),[]),a.createElement("time",null,Intl.DateTimeFormat("en-US",{timeStyle:"long"}).format(e))},ResetableErrorBoundary:function(e){let{children:n}=e;const[t,r]=a.useState(0),{resetEntireStore:i}=(0,E.Z)();return a.createElement(M.Z,{key:t,fallbackComponent:e=>{let{error:n}=e;return a.createElement(a.Fragment,null,a.createElement("div",{className:v.Z.playgroundError},n.message," ",a.createElement("i",null,n.status)),a.createElement("button",{onClick:()=>{i(),r((e=>e+1))}},"Clear Error"))}},n)}},w={...P,Todo:g,TodoResource:A,TodoEndpoint:b};function N(e){let{code:n,includeEndpoints:t,...o}=e;return a.createElement(i.nu,{key:"preview",code:n,transformCode:R,noInline:!0,scope:t?w:P},a.createElement(L.Z,(0,r.Z)({key:"preview"},o)))}},93716:e=>{e.exports="// Type definitions for bignumber.js >=8.1.0\r\n// Project: https://github.com/MikeMcl/bignumber.js\r\n// Definitions by: Michael Mclaughlin <https://github.com/MikeMcl>\r\n// Definitions: https://github.com/MikeMcl/bignumber.js\r\n\r\n// Documentation: http://mikemcl.github.io/bignumber.js/\r\n//\r\n// Exports:\r\n//\r\n//   class     BigNumber (default export)\r\n//   type      BigNumber.Constructor\r\n//   type      BigNumber.ModuloMode\r\n//   type      BigNumber.RoundingMOde\r\n//   type      BigNumber.Value\r\n//   interface BigNumber.Config\r\n//   interface BigNumber.Format\r\n//   interface BigNumber.Instance\r\n//\r\n// Example:\r\n//\r\n//   import {BigNumber} from \"bignumber.js\"\r\n//   //import BigNumber from \"bignumber.js\"\r\n//\r\n//   let rm: BigNumber.RoundingMode = BigNumber.ROUND_UP;\r\n//   let f: BigNumber.Format = { decimalSeparator: ',' };\r\n//   let c: BigNumber.Config = { DECIMAL_PLACES: 4, ROUNDING_MODE: rm, FORMAT: f };\r\n//   BigNumber.config(c);\r\n//\r\n//   let v: BigNumber.Value = '12345.6789';\r\n//   let b: BigNumber = new BigNumber(v);\r\n//\r\n// The use of compiler option `--strictNullChecks` is recommended.\r\n\r\nexport default BigNumber;\r\n\r\nexport namespace BigNumber {\r\n\r\n  /** See `BigNumber.config` (alias `BigNumber.set`) and `BigNumber.clone`. */\r\n  interface Config {\r\n\r\n    /**\r\n     * An integer, 0 to 1e+9. Default value: 20.\r\n     *\r\n     * The maximum number of decimal places of the result of operations involving division, i.e.\r\n     * division, square root and base conversion operations, and exponentiation when the exponent is\r\n     * negative.\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({ DECIMAL_PLACES: 5 })\r\n     * BigNumber.set({ DECIMAL_PLACES: 5 })\r\n     * ```\r\n     */\r\n    DECIMAL_PLACES?: number;\r\n\r\n    /**\r\n     * An integer, 0 to 8. Default value: `BigNumber.ROUND_HALF_UP` (4).\r\n     *\r\n     * The rounding mode used in operations that involve division (see `DECIMAL_PLACES`) and the\r\n     * default rounding mode of the `decimalPlaces`, `precision`, `toExponential`, `toFixed`,\r\n     * `toFormat` and `toPrecision` methods.\r\n     *\r\n     * The modes are available as enumerated properties of the BigNumber constructor.\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({ ROUNDING_MODE: 0 })\r\n     * BigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_UP })\r\n     * ```\r\n     */\r\n    ROUNDING_MODE?: BigNumber.RoundingMode;\r\n\r\n    /**\r\n     * An integer, 0 to 1e+9, or an array, [-1e+9 to 0, 0 to 1e+9].\r\n     * Default value: `[-7, 20]`.\r\n     *\r\n     * The exponent value(s) at which `toString` returns exponential notation.\r\n     *\r\n     * If a single number is assigned, the value is the exponent magnitude.\r\n     *\r\n     * If an array of two numbers is assigned then the first number is the negative exponent value at\r\n     * and beneath which exponential notation is used, and the second number is the positive exponent\r\n     * value at and above which exponential notation is used.\r\n     *\r\n     * For example, to emulate JavaScript numbers in terms of the exponent values at which they begin\r\n     * to use exponential notation, use `[-7, 20]`.\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({ EXPONENTIAL_AT: 2 })\r\n     * new BigNumber(12.3)         // '12.3'        e is only 1\r\n     * new BigNumber(123)          // '1.23e+2'\r\n     * new BigNumber(0.123)        // '0.123'       e is only -1\r\n     * new BigNumber(0.0123)       // '1.23e-2'\r\n     *\r\n     * BigNumber.config({ EXPONENTIAL_AT: [-7, 20] })\r\n     * new BigNumber(123456789)    // '123456789'   e is only 8\r\n     * new BigNumber(0.000000123)  // '1.23e-7'\r\n     *\r\n     * // Almost never return exponential notation:\r\n     * BigNumber.config({ EXPONENTIAL_AT: 1e+9 })\r\n     *\r\n     * // Always return exponential notation:\r\n     * BigNumber.config({ EXPONENTIAL_AT: 0 })\r\n     * ```\r\n     *\r\n     * Regardless of the value of `EXPONENTIAL_AT`, the `toFixed` method will always return a value in\r\n     * normal notation and the `toExponential` method will always return a value in exponential form.\r\n     * Calling `toString` with a base argument, e.g. `toString(10)`, will also always return normal\r\n     * notation.\r\n     */\r\n    EXPONENTIAL_AT?: number | [number, number];\r\n\r\n    /**\r\n     * An integer, magnitude 1 to 1e+9, or an array, [-1e+9 to -1, 1 to 1e+9].\r\n     * Default value: `[-1e+9, 1e+9]`.\r\n     *\r\n     * The exponent value(s) beyond which overflow to Infinity and underflow to zero occurs.\r\n     *\r\n     * If a single number is assigned, it is the maximum exponent magnitude: values wth a positive\r\n     * exponent of greater magnitude become Infinity and those with a negative exponent of greater\r\n     * magnitude become zero.\r\n     *\r\n     * If an array of two numbers is assigned then the first number is the negative exponent limit and\r\n     * the second number is the positive exponent limit.\r\n     *\r\n     * For example, to emulate JavaScript numbers in terms of the exponent values at which they\r\n     * become zero and Infinity, use [-324, 308].\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({ RANGE: 500 })\r\n     * BigNumber.config().RANGE     // [ -500, 500 ]\r\n     * new BigNumber('9.999e499')   // '9.999e+499'\r\n     * new BigNumber('1e500')       // 'Infinity'\r\n     * new BigNumber('1e-499')      // '1e-499'\r\n     * new BigNumber('1e-500')      // '0'\r\n     *\r\n     * BigNumber.config({ RANGE: [-3, 4] })\r\n     * new BigNumber(99999)         // '99999'      e is only 4\r\n     * new BigNumber(100000)        // 'Infinity'   e is 5\r\n     * new BigNumber(0.001)         // '0.01'       e is only -3\r\n     * new BigNumber(0.0001)        // '0'          e is -4\r\n     * ```\r\n     * The largest possible magnitude of a finite BigNumber is 9.999...e+1000000000.\r\n     * The smallest possible magnitude of a non-zero BigNumber is 1e-1000000000.\r\n     */\r\n    RANGE?: number | [number, number];\r\n\r\n    /**\r\n     * A boolean: `true` or `false`. Default value: `false`.\r\n     *\r\n     * The value that determines whether cryptographically-secure pseudo-random number generation is\r\n     * used. If `CRYPTO` is set to true then the random method will generate random digits using\r\n     * `crypto.getRandomValues` in browsers that support it, or `crypto.randomBytes` if using a\r\n     * version of Node.js that supports it.\r\n     *\r\n     * If neither function is supported by the host environment then attempting to set `CRYPTO` to\r\n     * `true` will fail and an exception will be thrown.\r\n     *\r\n     * If `CRYPTO` is `false` then the source of randomness used will be `Math.random` (which is\r\n     * assumed to generate at least 30 bits of randomness).\r\n     *\r\n     * See `BigNumber.random`.\r\n     *\r\n     * ```ts\r\n     * // Node.js\r\n     * global.crypto = require('crypto')\r\n     *\r\n     * BigNumber.config({ CRYPTO: true })\r\n     * BigNumber.config().CRYPTO       // true\r\n     * BigNumber.random()              // 0.54340758610486147524\r\n     * ```\r\n     */\r\n    CRYPTO?: boolean;\r\n\r\n    /**\r\n     * An integer, 0, 1, 3, 6 or 9. Default value: `BigNumber.ROUND_DOWN` (1).\r\n     *\r\n     * The modulo mode used when calculating the modulus: `a mod n`.\r\n     * The quotient, `q = a / n`, is calculated according to the `ROUNDING_MODE` that corresponds to\r\n     * the chosen `MODULO_MODE`.\r\n     * The remainder, `r`, is calculated as: `r = a - n * q`.\r\n     *\r\n     * The modes that are most commonly used for the modulus/remainder operation are shown in the\r\n     * following table. Although the other rounding modes can be used, they may not give useful\r\n     * results.\r\n     *\r\n     * Property           | Value | Description\r\n     * :------------------|:------|:------------------------------------------------------------------\r\n     *  `ROUND_UP`        |   0   | The remainder is positive if the dividend is negative.\r\n     *  `ROUND_DOWN`      |   1   | The remainder has the same sign as the dividend.\r\n     *                    |       | Uses 'truncating division' and matches JavaScript's `%` operator .\r\n     *  `ROUND_FLOOR`     |   3   | The remainder has the same sign as the divisor.\r\n     *                    |       | This matches Python's `%` operator.\r\n     *  `ROUND_HALF_EVEN` |   6   | The IEEE 754 remainder function.\r\n     *  `EUCLID`          |   9   | The remainder is always positive.\r\n     *                    |       | Euclidian division: `q = sign(n) * floor(a / abs(n))`\r\n     *\r\n     * The rounding/modulo modes are available as enumerated properties of the BigNumber constructor.\r\n     *\r\n     * See `modulo`.\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({ MODULO_MODE: BigNumber.EUCLID })\r\n     * BigNumber.set({ MODULO_MODE: 9 })          // equivalent\r\n     * ```\r\n     */\r\n    MODULO_MODE?: BigNumber.ModuloMode;\r\n\r\n    /**\r\n     * An integer, 0 to 1e+9. Default value: 0.\r\n     *\r\n     * The maximum precision, i.e. number of significant digits, of the result of the power operation\r\n     * - unless a modulus is specified.\r\n     *\r\n     * If set to 0, the number of significant digits will not be limited.\r\n     *\r\n     * See `exponentiatedBy`.\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({ POW_PRECISION: 100 })\r\n     * ```\r\n     */\r\n    POW_PRECISION?: number;\r\n\r\n    /**\r\n     * An object including any number of the properties shown below.\r\n     *\r\n     * The object configures the format of the string returned by the `toFormat` method.\r\n     * The example below shows the properties of the object that are recognised, and\r\n     * their default values.\r\n     *\r\n     * Unlike the other configuration properties, the values of the properties of the `FORMAT` object\r\n     * will not be checked for validity - the existing object will simply be replaced by the object\r\n     * that is passed in.\r\n     *\r\n     * See `toFormat`.\r\n     *\r\n     * ```ts\r\n     * BigNumber.config({\r\n     *   FORMAT: {\r\n     *     // string to prepend\r\n     *     prefix: '',\r\n     *     // the decimal separator\r\n     *     decimalSeparator: '.',\r\n     *     // the grouping separator of the integer part\r\n     *     groupSeparator: ',',\r\n     *     // the primary grouping size of the integer part\r\n     *     groupSize: 3,\r\n     *     // the secondary grouping size of the integer part\r\n     *     secondaryGroupSize: 0,\r\n     *     // the grouping separator of the fraction part\r\n     *     fractionGroupSeparator: ' ',\r\n     *     // the grouping size of the fraction part\r\n     *     fractionGroupSize: 0,\r\n     *     // string to append\r\n     *     suffix: ''\r\n     *   }\r\n     * })\r\n     * ```\r\n     */\r\n    FORMAT?: BigNumber.Format;\r\n\r\n    /**\r\n     * The alphabet used for base conversion. The length of the alphabet corresponds to the maximum\r\n     * value of the base argument that can be passed to the BigNumber constructor or `toString`.\r\n     *\r\n     * Default value: `'0123456789abcdefghijklmnopqrstuvwxyz'`.\r\n     *\r\n     * There is no maximum length for the alphabet, but it must be at least 2 characters long,\r\n     * and it must not contain whitespace or a repeated character, or the sign indicators '+' and\r\n     * '-', or the decimal separator '.'.\r\n     *\r\n     * ```ts\r\n     * // duodecimal (base 12)\r\n     * BigNumber.config({ ALPHABET: '0123456789TE' })\r\n     * x = new BigNumber('T', 12)\r\n     * x.toString()                // '10'\r\n     * x.toString(12)              // 'T'\r\n     * ```\r\n     */\r\n    ALPHABET?: string;\r\n  }\r\n\r\n  /** See `FORMAT` and `toFormat`. */\r\n  interface Format {\r\n\r\n    /** The string to prepend. */\r\n    prefix?: string;\r\n\r\n    /** The decimal separator. */\r\n    decimalSeparator?: string;\r\n\r\n    /** The grouping separator of the integer part. */\r\n    groupSeparator?: string;\r\n\r\n    /** The primary grouping size of the integer part. */\r\n    groupSize?: number;\r\n\r\n    /** The secondary grouping size of the integer part. */\r\n    secondaryGroupSize?: number;\r\n\r\n    /** The grouping separator of the fraction part. */\r\n    fractionGroupSeparator?: string;\r\n\r\n    /** The grouping size of the fraction part. */\r\n    fractionGroupSize?: number;\r\n\r\n    /** The string to append. */\r\n    suffix?: string;\r\n  }\r\n\r\n  interface Instance {\r\n\r\n    /** The coefficient of the value of this BigNumber, an array of base 1e14 integer numbers, or null. */\r\n    readonly c: number[] | null;\r\n\r\n    /** The exponent of the value of this BigNumber, an integer number, -1000000000 to 1000000000, or null. */\r\n    readonly e: number | null;\r\n\r\n    /** The sign of the value of this BigNumber, -1, 1, or null. */\r\n    readonly s: number | null;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  type Constructor = typeof BigNumber;\r\n  type ModuloMode = 0 | 1 | 3 | 6 | 9;\r\n  type RoundingMode = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n  type Value = string | number | Instance;\r\n}\r\n\r\nexport declare class BigNumber implements BigNumber.Instance {\r\n\r\n  /** Used internally to identify a BigNumber instance. */\r\n  private readonly _isBigNumber: true;\r\n\r\n  /** The coefficient of the value of this BigNumber, an array of base 1e14 integer numbers, or null. */\r\n  readonly c: number[] | null;\r\n\r\n  /** The exponent of the value of this BigNumber, an integer number, -1000000000 to 1000000000, or null. */\r\n  readonly e: number | null;\r\n\r\n  /** The sign of the value of this BigNumber, -1, 1, or null. */\r\n  readonly s: number | null;\r\n\r\n  /**\r\n   * Returns a new instance of a BigNumber object with value `n`, where `n` is a numeric value in\r\n   * the specified `base`, or base 10 if `base` is omitted or is `null` or `undefined`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(123.4567)              // '123.4567'\r\n   * // 'new' is optional\r\n   * y = BigNumber(x)                         // '123.4567'\r\n   * ```\r\n   *\r\n   * If `n` is a base 10 value it can be in normal (fixed-point) or exponential notation.\r\n   * Values in other bases must be in normal notation. Values in any base can have fraction digits,\r\n   * i.e. digits after the decimal point.\r\n   *\r\n   * ```ts\r\n   * new BigNumber(43210)                     // '43210'\r\n   * new BigNumber('4.321e+4')                // '43210'\r\n   * new BigNumber('-735.0918e-430')          // '-7.350918e-428'\r\n   * new BigNumber('123412421.234324', 5)     // '607236.557696'\r\n   * ```\r\n   *\r\n   * Signed `0`, signed `Infinity` and `NaN` are supported.\r\n   *\r\n   * ```ts\r\n   * new BigNumber('-Infinity')               // '-Infinity'\r\n   * new BigNumber(NaN)                       // 'NaN'\r\n   * new BigNumber(-0)                        // '0'\r\n   * new BigNumber('.5')                      // '0.5'\r\n   * new BigNumber('+2')                      // '2'\r\n   * ```\r\n   *\r\n   * String values in hexadecimal literal form, e.g. `'0xff'`, are valid, as are string values with\r\n   * the octal and binary prefixs `'0o'` and `'0b'`. String values in octal literal form without the\r\n   * prefix will be interpreted as decimals, e.g. `'011'` is interpreted as 11, not 9.\r\n   *\r\n   * ```ts\r\n   * new BigNumber(-10110100.1, 2)            // '-180.5'\r\n   * new BigNumber('-0b10110100.1')           // '-180.5'\r\n   * new BigNumber('ff.8', 16)                // '255.5'\r\n   * new BigNumber('0xff.8')                  // '255.5'\r\n   * ```\r\n   *\r\n   * If a base is specified, `n` is rounded according to the current `DECIMAL_PLACES` and\r\n   * `ROUNDING_MODE` settings. This includes base 10, so don't include a `base` parameter for decimal\r\n   * values unless this behaviour is desired.\r\n   *\r\n   * ```ts\r\n   * BigNumber.config({ DECIMAL_PLACES: 5 })\r\n   * new BigNumber(1.23456789)                // '1.23456789'\r\n   * new BigNumber(1.23456789, 10)            // '1.23457'\r\n   * ```\r\n   *\r\n   * An error is thrown if `base` is invalid.\r\n   *\r\n   * There is no limit to the number of digits of a value of type string (other than that of\r\n   * JavaScript's maximum array size). See `RANGE` to set the maximum and minimum possible exponent\r\n   * value of a BigNumber.\r\n   *\r\n   * ```ts\r\n   * new BigNumber('5032485723458348569331745.33434346346912144534543')\r\n   * new BigNumber('4.321e10000000')\r\n   * ```\r\n   *\r\n   * BigNumber `NaN` is returned if `n` is invalid (unless `BigNumber.DEBUG` is `true`, see below).\r\n   *\r\n   * ```ts\r\n   * new BigNumber('.1*')                    // 'NaN'\r\n   * new BigNumber('blurgh')                 // 'NaN'\r\n   * new BigNumber(9, 2)                     // 'NaN'\r\n   * ```\r\n   *\r\n   * To aid in debugging, if `BigNumber.DEBUG` is `true` then an error will be thrown on an\r\n   * invalid `n`. An error will also be thrown if `n` is of type number with more than 15\r\n   * significant digits, as calling `toString` or `valueOf` on these numbers may not result in the\r\n   * intended value.\r\n   *\r\n   * ```ts\r\n   * console.log(823456789123456.3)          //  823456789123456.2\r\n   * new BigNumber(823456789123456.3)        // '823456789123456.2'\r\n   * BigNumber.DEBUG = true\r\n   * // 'Error: Number has more than 15 significant digits'\r\n   * new BigNumber(823456789123456.3)\r\n   * // 'Error: Not a base 2 number'\r\n   * new BigNumber(9, 2)\r\n   * ```\r\n   *\r\n   * A BigNumber can also be created from an object literal.\r\n   * Use `isBigNumber` to check that it is well-formed.\r\n   *\r\n   * ```ts\r\n   * new BigNumber({ s: 1, e: 2, c: [ 777, 12300000000000 ], _isBigNumber: true })    // '777.123'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param base The base of `n`, integer, 2 to 36 (or `ALPHABET.length`, see `ALPHABET`).\r\n   */\r\n  constructor(n: BigNumber.Value, base?: number);\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the absolute value, i.e. the magnitude, of the value of this\r\n   * BigNumber.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(-0.8)\r\n   * x.absoluteValue()           // '0.8'\r\n   * ```\r\n   */\r\n  absoluteValue(): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the absolute value, i.e. the magnitude, of the value of this\r\n   * BigNumber.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(-0.8)\r\n   * x.abs()                     // '0.8'\r\n   * ```\r\n   */\r\n  abs(): BigNumber;\r\n\r\n  /**\r\n   *  Returns |                                                               |\r\n   * :-------:|:--------------------------------------------------------------|\r\n   *     1    | If the value of this BigNumber is greater than the value of `n`\r\n   *    -1    | If the value of this BigNumber is less than the value of `n`\r\n   *     0    | If this BigNumber and `n` have the same value\r\n   *  `null`  | If the value of either this BigNumber or `n` is `NaN`\r\n   *\r\n   * ```ts\r\n   *\r\n   * x = new BigNumber(Infinity)\r\n   * y = new BigNumber(5)\r\n   * x.comparedTo(y)                 // 1\r\n   * x.comparedTo(x.minus(1))        // 0\r\n   * y.comparedTo(NaN)               // null\r\n   * y.comparedTo('110', 2)          // -1\r\n   * ```\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  comparedTo(n: BigNumber.Value, base?: number): number;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber rounded by rounding mode\r\n   * `roundingMode` to a maximum of `decimalPlaces` decimal places.\r\n   *\r\n   * If `decimalPlaces` is omitted, or is `null` or `undefined`, the return value is the number of\r\n   * decimal places of the value of this BigNumber, or `null` if the value of this BigNumber is\r\n   * \xb1`Infinity` or `NaN`.\r\n   *\r\n   * If `roundingMode` is omitted, or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * Throws if `decimalPlaces` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1234.56)\r\n   * x.decimalPlaces()                      // 2\r\n   * x.decimalPlaces(1)                     // '1234.6'\r\n   * x.decimalPlaces(2)                     // '1234.56'\r\n   * x.decimalPlaces(10)                    // '1234.56'\r\n   * x.decimalPlaces(0, 1)                  // '1234'\r\n   * x.decimalPlaces(0, 6)                  // '1235'\r\n   * x.decimalPlaces(1, 1)                  // '1234.5'\r\n   * x.decimalPlaces(1, BigNumber.ROUND_HALF_EVEN)     // '1234.6'\r\n   * x                                      // '1234.56'\r\n   * y = new BigNumber('9.9e-101')\r\n   * y.decimalPlaces()                      // 102\r\n   * ```\r\n   *\r\n   * @param [decimalPlaces] Decimal places, integer, 0 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   */\r\n  decimalPlaces(): number | null;\r\n  decimalPlaces(decimalPlaces: number, roundingMode?: BigNumber.RoundingMode): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber rounded by rounding mode\r\n   * `roundingMode` to a maximum of `decimalPlaces` decimal places.\r\n   *\r\n   * If `decimalPlaces` is omitted, or is `null` or `undefined`, the return value is the number of\r\n   * decimal places of the value of this BigNumber, or `null` if the value of this BigNumber is\r\n   * \xb1`Infinity` or `NaN`.\r\n   *\r\n   * If `roundingMode` is omitted, or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * Throws if `decimalPlaces` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1234.56)\r\n   * x.dp()                                 // 2\r\n   * x.dp(1)                                // '1234.6'\r\n   * x.dp(2)                                // '1234.56'\r\n   * x.dp(10)                               // '1234.56'\r\n   * x.dp(0, 1)                             // '1234'\r\n   * x.dp(0, 6)                             // '1235'\r\n   * x.dp(1, 1)                             // '1234.5'\r\n   * x.dp(1, BigNumber.ROUND_HALF_EVEN)     // '1234.6'\r\n   * x                                      // '1234.56'\r\n   * y = new BigNumber('9.9e-101')\r\n   * y.dp()                                 // 102\r\n   * ```\r\n   *\r\n   * @param [decimalPlaces] Decimal places, integer, 0 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   */\r\n  dp(): number | null;\r\n  dp(decimalPlaces: number, roundingMode?: BigNumber.RoundingMode): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber divided by `n`, rounded\r\n   * according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(355)\r\n   * y = new BigNumber(113)\r\n   * x.dividedBy(y)                  // '3.14159292035398230088'\r\n   * x.dividedBy(5)                  // '71'\r\n   * x.dividedBy(47, 16)             // '5'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  dividedBy(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber divided by `n`, rounded\r\n   * according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(355)\r\n   * y = new BigNumber(113)\r\n   * x.div(y)                    // '3.14159292035398230088'\r\n   * x.div(5)                    // '71'\r\n   * x.div(47, 16)               // '5'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  div(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the integer part of dividing the value of this BigNumber by\r\n   * `n`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(5)\r\n   * y = new BigNumber(3)\r\n   * x.dividedToIntegerBy(y)              // '1'\r\n   * x.dividedToIntegerBy(0.7)            // '7'\r\n   * x.dividedToIntegerBy('0.f', 16)      // '5'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  dividedToIntegerBy(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the integer part of dividing the value of this BigNumber by\r\n   * `n`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(5)\r\n   * y = new BigNumber(3)\r\n   * x.idiv(y)                       // '1'\r\n   * x.idiv(0.7)                     // '7'\r\n   * x.idiv('0.f', 16)               // '5'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  idiv(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber exponentiated by `n`, i.e.\r\n   * raised to the power `n`, and optionally modulo a modulus `m`.\r\n   *\r\n   * If `n` is negative the result is rounded according to the current `DECIMAL_PLACES` and\r\n   * `ROUNDING_MODE` settings.\r\n   *\r\n   * As the number of digits of the result of the power operation can grow so large so quickly,\r\n   * e.g. 123.456**10000 has over 50000 digits, the number of significant digits calculated is\r\n   * limited to the value of the `POW_PRECISION` setting (unless a modulus `m` is specified).\r\n   *\r\n   * By default `POW_PRECISION` is set to 0. This means that an unlimited number of significant\r\n   * digits will be calculated, and that the method's performance will decrease dramatically for\r\n   * larger exponents.\r\n   *\r\n   * If `m` is specified and the value of `m`, `n` and this BigNumber are integers and `n` is\r\n   * positive, then a fast modular exponentiation algorithm is used, otherwise the operation will\r\n   * be performed as `x.exponentiatedBy(n).modulo(m)` with a `POW_PRECISION` of 0.\r\n   *\r\n   * Throws if `n` is not an integer.\r\n   *\r\n   * ```ts\r\n   * Math.pow(0.7, 2)                    // 0.48999999999999994\r\n   * x = new BigNumber(0.7)\r\n   * x.exponentiatedBy(2)                // '0.49'\r\n   * BigNumber(3).exponentiatedBy(-2)    // '0.11111111111111111111'\r\n   * ```\r\n   *\r\n   * @param n The exponent, an integer.\r\n   * @param [m] The modulus.\r\n   */\r\n  exponentiatedBy(n: BigNumber.Value, m?: BigNumber.Value): BigNumber;\r\n  exponentiatedBy(n: number, m?: BigNumber.Value): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber exponentiated by `n`, i.e.\r\n   * raised to the power `n`, and optionally modulo a modulus `m`.\r\n   *\r\n   * If `n` is negative the result is rounded according to the current `DECIMAL_PLACES` and\r\n   * `ROUNDING_MODE` settings.\r\n   *\r\n   * As the number of digits of the result of the power operation can grow so large so quickly,\r\n   * e.g. 123.456**10000 has over 50000 digits, the number of significant digits calculated is\r\n   * limited to the value of the `POW_PRECISION` setting (unless a modulus `m` is specified).\r\n   *\r\n   * By default `POW_PRECISION` is set to 0. This means that an unlimited number of significant\r\n   * digits will be calculated, and that the method's performance will decrease dramatically for\r\n   * larger exponents.\r\n   *\r\n   * If `m` is specified and the value of `m`, `n` and this BigNumber are integers and `n` is\r\n   * positive, then a fast modular exponentiation algorithm is used, otherwise the operation will\r\n   * be performed as `x.pow(n).modulo(m)` with a `POW_PRECISION` of 0.\r\n   *\r\n   * Throws if `n` is not an integer.\r\n   *\r\n   * ```ts\r\n   * Math.pow(0.7, 2)                   // 0.48999999999999994\r\n   * x = new BigNumber(0.7)\r\n   * x.pow(2)                           // '0.49'\r\n   * BigNumber(3).pow(-2)               // '0.11111111111111111111'\r\n   * ```\r\n   *\r\n   * @param n The exponent, an integer.\r\n   * @param [m] The modulus.\r\n   */\r\n  pow(n: BigNumber.Value, m?: BigNumber.Value): BigNumber;\r\n  pow(n: number, m?: BigNumber.Value): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber rounded to an integer using\r\n   * rounding mode `rm`.\r\n   *\r\n   * If `rm` is omitted, or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * Throws if `rm` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(123.456)\r\n   * x.integerValue()                        // '123'\r\n   * x.integerValue(BigNumber.ROUND_CEIL)    // '124'\r\n   * y = new BigNumber(-12.7)\r\n   * y.integerValue()                        // '-13'\r\n   * x.integerValue(BigNumber.ROUND_DOWN)    // '-12'\r\n   * ```\r\n   *\r\n   * @param {BigNumber.RoundingMode} [rm] The roundng mode, an integer, 0 to 8.\r\n   */\r\n  integerValue(rm?: BigNumber.RoundingMode): BigNumber;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is equal to the value of `n`, otherwise returns\r\n   * `false`.\r\n   *\r\n   * As with JavaScript, `NaN` does not equal `NaN`.\r\n   *\r\n   * ```ts\r\n   * 0 === 1e-324                           // true\r\n   * x = new BigNumber(0)\r\n   * x.isEqualTo('1e-324')                  // false\r\n   * BigNumber(-0).isEqualTo(x)             // true  ( -0 === 0 )\r\n   * BigNumber(255).isEqualTo('ff', 16)     // true\r\n   *\r\n   * y = new BigNumber(NaN)\r\n   * y.isEqualTo(NaN)                // false\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  isEqualTo(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is equal to the value of `n`, otherwise returns\r\n   * `false`.\r\n   *\r\n   * As with JavaScript, `NaN` does not equal `NaN`.\r\n   *\r\n   * ```ts\r\n   * 0 === 1e-324                    // true\r\n   * x = new BigNumber(0)\r\n   * x.eq('1e-324')                  // false\r\n   * BigNumber(-0).eq(x)             // true  ( -0 === 0 )\r\n   * BigNumber(255).eq('ff', 16)     // true\r\n   *\r\n   * y = new BigNumber(NaN)\r\n   * y.eq(NaN)                       // false\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  eq(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is a finite number, otherwise returns `false`.\r\n   *\r\n   * The only possible non-finite values of a BigNumber are `NaN`, `Infinity` and `-Infinity`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1)\r\n   * x.isFinite()                    // true\r\n   * y = new BigNumber(Infinity)\r\n   * y.isFinite()                    // false\r\n   * ```\r\n   */\r\n  isFinite(): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is greater than the value of `n`, otherwise\r\n   * returns `false`.\r\n   *\r\n   * ```ts\r\n   * 0.1 > (0.3 - 0.2)                             // true\r\n   * x = new BigNumber(0.1)\r\n   * x.isGreaterThan(BigNumber(0.3).minus(0.2))    // false\r\n   * BigNumber(0).isGreaterThan(x)                 // false\r\n   * BigNumber(11, 3).isGreaterThan(11.1, 2)       // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  isGreaterThan(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is greater than the value of `n`, otherwise\r\n   * returns `false`.\r\n   *\r\n   * ```ts\r\n   * 0.1 > (0.3 - 0                     // true\r\n   * x = new BigNumber(0.1)\r\n   * x.gt(BigNumber(0.3).minus(0.2))    // false\r\n   * BigNumber(0).gt(x)                 // false\r\n   * BigNumber(11, 3).gt(11.1, 2)       // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  gt(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is greater than or equal to the value of `n`,\r\n   * otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * (0.3 - 0.2) >= 0.1                                  // false\r\n   * x = new BigNumber(0.3).minus(0.2)\r\n   * x.isGreaterThanOrEqualTo(0.1)                       // true\r\n   * BigNumber(1).isGreaterThanOrEqualTo(x)              // true\r\n   * BigNumber(10, 18).isGreaterThanOrEqualTo('i', 36)   // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  isGreaterThanOrEqualTo(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is greater than or equal to the value of `n`,\r\n   * otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * (0.3 - 0.2) >= 0.1                    // false\r\n   * x = new BigNumber(0.3).minus(0.2)\r\n   * x.gte(0.1)                            // true\r\n   * BigNumber(1).gte(x)                   // true\r\n   * BigNumber(10, 18).gte('i', 36)        // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  gte(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is an integer, otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1)\r\n   * x.isInteger()                   // true\r\n   * y = new BigNumber(123.456)\r\n   * y.isInteger()                   // false\r\n   * ```\r\n   */\r\n  isInteger(): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is less than the value of `n`, otherwise returns\r\n   * `false`.\r\n   *\r\n   * ```ts\r\n   * (0.3 - 0.2) < 0.1                       // true\r\n   * x = new BigNumber(0.3).minus(0.2)\r\n   * x.isLessThan(0.1)                       // false\r\n   * BigNumber(0).isLessThan(x)              // true\r\n   * BigNumber(11.1, 2).isLessThan(11, 3)    // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  isLessThan(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is less than the value of `n`, otherwise returns\r\n   * `false`.\r\n   *\r\n   * ```ts\r\n   * (0.3 - 0.2) < 0.1                       // true\r\n   * x = new BigNumber(0.3).minus(0.2)\r\n   * x.lt(0.1)                               // false\r\n   * BigNumber(0).lt(x)                      // true\r\n   * BigNumber(11.1, 2).lt(11, 3)            // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  lt(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is less than or equal to the value of `n`,\r\n   * otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * 0.1 <= (0.3 - 0.2)                                 // false\r\n   * x = new BigNumber(0.1)\r\n   * x.isLessThanOrEqualTo(BigNumber(0.3).minus(0.2))   // true\r\n   * BigNumber(-1).isLessThanOrEqualTo(x)               // true\r\n   * BigNumber(10, 18).isLessThanOrEqualTo('i', 36)     // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  isLessThanOrEqualTo(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is less than or equal to the value of `n`,\r\n   * otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * 0.1 <= (0.3 - 0.2)                  // false\r\n   * x = new BigNumber(0.1)\r\n   * x.lte(BigNumber(0.3).minus(0.2))    // true\r\n   * BigNumber(-1).lte(x)                // true\r\n   * BigNumber(10, 18).lte('i', 36)      // true\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  lte(n: BigNumber.Value, base?: number): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is `NaN`, otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(NaN)\r\n   * x.isNaN()                       // true\r\n   * y = new BigNumber('Infinity')\r\n   * y.isNaN()                       // false\r\n   * ```\r\n   */\r\n  isNaN(): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is negative, otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(-0)\r\n   * x.isNegative()                  // true\r\n   * y = new BigNumber(2)\r\n   * y.isNegative()                  // false\r\n   * ```\r\n   */\r\n  isNegative(): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is positive, otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(-0)\r\n   * x.isPositive()                  // false\r\n   * y = new BigNumber(2)\r\n   * y.isPositive()                  // true\r\n   * ```\r\n   */\r\n  isPositive(): boolean;\r\n\r\n  /**\r\n   * Returns `true` if the value of this BigNumber is zero or minus zero, otherwise returns `false`.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(-0)\r\n   * x.isZero()                 // true\r\n   * ```\r\n   */\r\n  isZero(): boolean;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber minus `n`.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * 0.3 - 0.1                       // 0.19999999999999998\r\n   * x = new BigNumber(0.3)\r\n   * x.minus(0.1)                    // '0.2'\r\n   * x.minus(0.6, 20)                // '0'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  minus(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber modulo `n`, i.e. the integer\r\n   * remainder of dividing this BigNumber by `n`.\r\n   *\r\n   * The value returned, and in particular its sign, is dependent on the value of the `MODULO_MODE`\r\n   * setting of this BigNumber constructor. If it is 1 (default value), the result will have the\r\n   * same sign as this BigNumber, and it will match that of Javascript's `%` operator (within the\r\n   * limits of double precision) and BigDecimal's `remainder` method.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * See `MODULO_MODE` for a description of the other modulo modes.\r\n   *\r\n   * ```ts\r\n   * 1 % 0.9                         // 0.09999999999999998\r\n   * x = new BigNumber(1)\r\n   * x.modulo(0.9)                   // '0.1'\r\n   * y = new BigNumber(33)\r\n   * y.modulo('a', 33)               // '3'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  modulo(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber modulo `n`, i.e. the integer\r\n   * remainder of dividing this BigNumber by `n`.\r\n   *\r\n   * The value returned, and in particular its sign, is dependent on the value of the `MODULO_MODE`\r\n   * setting of this BigNumber constructor. If it is 1 (default value), the result will have the\r\n   * same sign as this BigNumber, and it will match that of Javascript's `%` operator (within the\r\n   * limits of double precision) and BigDecimal's `remainder` method.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * See `MODULO_MODE` for a description of the other modulo modes.\r\n   *\r\n   * ```ts\r\n   * 1 % 0.9                      // 0.09999999999999998\r\n   * x = new BigNumber(1)\r\n   * x.mod(0.9)                   // '0.1'\r\n   * y = new BigNumber(33)\r\n   * y.mod('a', 33)               // '3'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  mod(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber multiplied by `n`.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * 0.6 * 3                                // 1.7999999999999998\r\n   * x = new BigNumber(0.6)\r\n   * y = x.multipliedBy(3)                  // '1.8'\r\n   * BigNumber('7e+500').multipliedBy(y)    // '1.26e+501'\r\n   * x.multipliedBy('-a', 16)               // '-6'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  multipliedBy(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber multiplied by `n`.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * 0.6 * 3                         // 1.7999999999999998\r\n   * x = new BigNumber(0.6)\r\n   * y = x.times(3)                  // '1.8'\r\n   * BigNumber('7e+500').times(y)    // '1.26e+501'\r\n   * x.times('-a', 16)               // '-6'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  times(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber negated, i.e. multiplied by -1.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1.8)\r\n   * x.negated()                     // '-1.8'\r\n   * y = new BigNumber(-1.3)\r\n   * y.negated()                     // '1.3'\r\n   * ```\r\n   */\r\n  negated(): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber plus `n`.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * 0.1 + 0.2                       // 0.30000000000000004\r\n   * x = new BigNumber(0.1)\r\n   * y = x.plus(0.2)                 // '0.3'\r\n   * BigNumber(0.7).plus(x).plus(y)  // '1.1'\r\n   * x.plus('0.1', 8)                // '0.225'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   * @param [base] The base of n.\r\n   */\r\n  plus(n: BigNumber.Value, base?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns the number of significant digits of the value of this BigNumber, or `null` if the value\r\n   * of this BigNumber is \xb1`Infinity` or `NaN`.\r\n   *\r\n   * If `includeZeros` is true then any trailing zeros of the integer part of the value of this\r\n   * BigNumber are counted as significant digits, otherwise they are not.\r\n   *\r\n   * Throws if `includeZeros` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(9876.54321)\r\n   * x.precision()                         // 9\r\n   * y = new BigNumber(987000)\r\n   * y.precision(false)                    // 3\r\n   * y.precision(true)                     // 6\r\n   * ```\r\n   *\r\n   * @param [includeZeros] Whether to include integer trailing zeros in the significant digit count.\r\n   */\r\n  precision(includeZeros?: boolean): number;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber rounded to a precision of\r\n   * `significantDigits` significant digits using rounding mode `roundingMode`.\r\n   *\r\n   * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` will be used.\r\n   *\r\n   * Throws if `significantDigits` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(9876.54321)\r\n   * x.precision(6)                         // '9876.54'\r\n   * x.precision(6, BigNumber.ROUND_UP)     // '9876.55'\r\n   * x.precision(2)                         // '9900'\r\n   * x.precision(2, 1)                      // '9800'\r\n   * x                                      // '9876.54321'\r\n   * ```\r\n   *\r\n   * @param significantDigits Significant digits, integer, 1 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   */\r\n  precision(significantDigits: number, roundingMode?: BigNumber.RoundingMode): BigNumber;\r\n\r\n  /**\r\n   * Returns the number of significant digits of the value of this BigNumber,\r\n   * or `null` if the value of this BigNumber is \xb1`Infinity` or `NaN`.\r\n   *\r\n   * If `includeZeros` is true then any trailing zeros of the integer part of\r\n   * the value of this BigNumber are counted as significant digits, otherwise\r\n   * they are not.\r\n   *\r\n   * Throws if `includeZeros` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(9876.54321)\r\n   * x.sd()                         // 9\r\n   * y = new BigNumber(987000)\r\n   * y.sd(false)                    // 3\r\n   * y.sd(true)                     // 6\r\n   * ```\r\n   *\r\n   * @param [includeZeros] Whether to include integer trailing zeros in the significant digit count.\r\n   */\r\n  sd(includeZeros?: boolean): number;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber rounded to a precision of\r\n   * `significantDigits` significant digits using rounding mode `roundingMode`.\r\n   *\r\n   * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` will be used.\r\n   *\r\n   * Throws if `significantDigits` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(9876.54321)\r\n   * x.sd(6)                           // '9876.54'\r\n   * x.sd(6, BigNumber.ROUND_UP)       // '9876.55'\r\n   * x.sd(2)                           // '9900'\r\n   * x.sd(2, 1)                        // '9800'\r\n   * x                                 // '9876.54321'\r\n   * ```\r\n   *\r\n   * @param significantDigits Significant digits, integer, 1 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   */\r\n  sd(significantDigits: number, roundingMode?: BigNumber.RoundingMode): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the value of this BigNumber shifted by `n` places.\r\n   *\r\n   * The shift is of the decimal point, i.e. of powers of ten, and is to the left if `n` is negative\r\n   * or to the right if `n` is positive.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * Throws if `n` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1.23)\r\n   * x.shiftedBy(3)                      // '1230'\r\n   * x.shiftedBy(-3)                     // '0.00123'\r\n   * ```\r\n   *\r\n   * @param n The shift value, integer, -9007199254740991 to 9007199254740991.\r\n   */\r\n  shiftedBy(n: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the square root of the value of this BigNumber, rounded\r\n   * according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\r\n   *\r\n   * The return value will be correctly rounded, i.e. rounded as if the result was first calculated\r\n   * to an infinite number of correct digits before rounding.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(16)\r\n   * x.squareRoot()                  // '4'\r\n   * y = new BigNumber(3)\r\n   * y.squareRoot()                  // '1.73205080756887729353'\r\n   * ```\r\n   */\r\n  squareRoot(): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the square root of the value of this BigNumber, rounded\r\n   * according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\r\n   *\r\n   * The return value will be correctly rounded, i.e. rounded as if the result was first calculated\r\n   * to an infinite number of correct digits before rounding.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(16)\r\n   * x.sqrt()                  // '4'\r\n   * y = new BigNumber(3)\r\n   * y.sqrt()                  // '1.73205080756887729353'\r\n   * ```\r\n   */\r\n  sqrt(): BigNumber;\r\n\r\n  /**\r\n   * Returns a string representing the value of this BigNumber in exponential notation rounded using\r\n   * rounding mode `roundingMode` to `decimalPlaces` decimal places, i.e with one digit before the\r\n   * decimal point and `decimalPlaces` digits after it.\r\n   *\r\n   * If the value of this BigNumber in exponential notation has fewer than `decimalPlaces` fraction\r\n   * digits, the return value will be appended with zeros accordingly.\r\n   *\r\n   * If `decimalPlaces` is omitted, or is `null` or `undefined`, the number of digits after the\r\n   * decimal point defaults to the minimum number of digits necessary to represent the value\r\n   * exactly.\r\n   *\r\n   * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * Throws if `decimalPlaces` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = 45.6\r\n   * y = new BigNumber(x)\r\n   * x.toExponential()               // '4.56e+1'\r\n   * y.toExponential()               // '4.56e+1'\r\n   * x.toExponential(0)              // '5e+1'\r\n   * y.toExponential(0)              // '5e+1'\r\n   * x.toExponential(1)              // '4.6e+1'\r\n   * y.toExponential(1)              // '4.6e+1'\r\n   * y.toExponential(1, 1)           // '4.5e+1'  (ROUND_DOWN)\r\n   * x.toExponential(3)              // '4.560e+1'\r\n   * y.toExponential(3)              // '4.560e+1'\r\n   * ```\r\n   *\r\n   * @param [decimalPlaces] Decimal places, integer, 0 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   */\r\n  toExponential(decimalPlaces: number, roundingMode?: BigNumber.RoundingMode): string;\r\n  toExponential(): string;\r\n\r\n  /**\r\n   * Returns a string representing the value of this BigNumber in normal (fixed-point) notation\r\n   * rounded to `decimalPlaces` decimal places using rounding mode `roundingMode`.\r\n   *\r\n   * If the value of this BigNumber in normal notation has fewer than `decimalPlaces` fraction\r\n   * digits, the return value will be appended with zeros accordingly.\r\n   *\r\n   * Unlike `Number.prototype.toFixed`, which returns exponential notation if a number is greater or\r\n   * equal to 10**21, this method will always return normal notation.\r\n   *\r\n   * If `decimalPlaces` is omitted or is `null` or `undefined`, the return value will be unrounded\r\n   * and in normal notation. This is also unlike `Number.prototype.toFixed`, which returns the value\r\n   * to zero decimal places. It is useful when normal notation is required and the current\r\n   * `EXPONENTIAL_AT` setting causes `toString` to return exponential notation.\r\n   *\r\n   * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * Throws if `decimalPlaces` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = 3.456\r\n   * y = new BigNumber(x)\r\n   * x.toFixed()                     // '3'\r\n   * y.toFixed()                     // '3.456'\r\n   * y.toFixed(0)                    // '3'\r\n   * x.toFixed(2)                    // '3.46'\r\n   * y.toFixed(2)                    // '3.46'\r\n   * y.toFixed(2, 1)                 // '3.45'  (ROUND_DOWN)\r\n   * x.toFixed(5)                    // '3.45600'\r\n   * y.toFixed(5)                    // '3.45600'\r\n   * ```\r\n   *\r\n   * @param [decimalPlaces] Decimal places, integer, 0 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   */\r\n  toFixed(decimalPlaces: number, roundingMode?: BigNumber.RoundingMode): string;\r\n  toFixed(): string;\r\n\r\n  /**\r\n   * Returns a string representing the value of this BigNumber in normal (fixed-point) notation\r\n   * rounded to `decimalPlaces` decimal places using rounding mode `roundingMode`, and formatted\r\n   * according to the properties of the `format` or `FORMAT` object.\r\n   *\r\n   * The formatting object may contain some or all of the properties shown in the examples below.\r\n   *\r\n   * If `decimalPlaces` is omitted or is `null` or `undefined`, then the return value is not\r\n   * rounded to a fixed number of decimal places.\r\n   *\r\n   * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * If `format` is omitted or is `null` or `undefined`, `FORMAT` is used.\r\n   *\r\n   * Throws if `decimalPlaces`, `roundingMode`, or `format` is invalid.\r\n   *\r\n   * ```ts\r\n   * fmt = {\r\n   *   decimalSeparator: '.',\r\n   *   groupSeparator: ',',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   fractionGroupSeparator: ' ',\r\n   *   fractionGroupSize: 0\r\n   * }\r\n   *\r\n   * x = new BigNumber('123456789.123456789')\r\n   *\r\n   * // Set the global formatting options\r\n   * BigNumber.config({ FORMAT: fmt })\r\n   *\r\n   * x.toFormat()                              // '123,456,789.123456789'\r\n   * x.toFormat(3)                             // '123,456,789.123'\r\n   *\r\n   * // If a reference to the object assigned to FORMAT has been retained,\r\n   * // the format properties can be changed directly\r\n   * fmt.groupSeparator = ' '\r\n   * fmt.fractionGroupSize = 5\r\n   * x.toFormat()                              // '123 456 789.12345 6789'\r\n   *\r\n   * // Alternatively, pass the formatting options as an argument\r\n   * fmt = {\r\n   *   decimalSeparator: ',',\r\n   *   groupSeparator: '.',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 2\r\n   * }\r\n   *\r\n   * x.toFormat()                              // '123 456 789.12345 6789'\r\n   * x.toFormat(fmt)                           // '12.34.56.789,123456789'\r\n   * x.toFormat(2, fmt)                        // '12.34.56.789,12'\r\n   * x.toFormat(3, BigNumber.ROUND_UP, fmt)    // '12.34.56.789,124'\r\n   * ```\r\n   *\r\n   * @param [decimalPlaces] Decimal places, integer, 0 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer, 0 to 8.\r\n   * @param [format] Formatting options object. See `BigNumber.Format`.\r\n   */\r\n  toFormat(decimalPlaces: number, roundingMode: BigNumber.RoundingMode, format?: BigNumber.Format): string;\r\n  toFormat(decimalPlaces: number, roundingMode?: BigNumber.RoundingMode): string;\r\n  toFormat(decimalPlaces?: number): string;\r\n  toFormat(decimalPlaces: number, format: BigNumber.Format): string;\r\n  toFormat(format: BigNumber.Format): string;\r\n\r\n  /**\r\n   * Returns an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to `max_denominator`.\r\n   * If a maximum denominator, `max_denominator`, is not specified, or is `null` or `undefined`, the\r\n   * denominator will be the lowest value necessary to represent the number exactly.\r\n   *\r\n   * Throws if `max_denominator` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(1.75)\r\n   * x.toFraction()                  // '7, 4'\r\n   *\r\n   * pi = new BigNumber('3.14159265358')\r\n   * pi.toFraction()                 // '157079632679,50000000000'\r\n   * pi.toFraction(100000)           // '312689, 99532'\r\n   * pi.toFraction(10000)            // '355, 113'\r\n   * pi.toFraction(100)              // '311, 99'\r\n   * pi.toFraction(10)               // '22, 7'\r\n   * pi.toFraction(1)                // '3, 1'\r\n   * ```\r\n   *\r\n   * @param [max_denominator] The maximum denominator, integer > 0, or Infinity.\r\n   */\r\n  toFraction(max_denominator?: BigNumber.Value): [BigNumber, BigNumber];\r\n\r\n  /** As `valueOf`. */\r\n  toJSON(): string;\r\n\r\n  /**\r\n   * Returns the value of this BigNumber as a JavaScript primitive number.\r\n   *\r\n   * Using the unary plus operator gives the same result.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(456.789)\r\n   * x.toNumber()                    // 456.789\r\n   * +x                              // 456.789\r\n   *\r\n   * y = new BigNumber('45987349857634085409857349856430985')\r\n   * y.toNumber()                    // 4.598734985763409e+34\r\n   *\r\n   * z = new BigNumber(-0)\r\n   * 1 / z.toNumber()                // -Infinity\r\n   * 1 / +z                          // -Infinity\r\n   * ```\r\n   */\r\n  toNumber(): number;\r\n\r\n  /**\r\n   * Returns a string representing the value of this BigNumber rounded to `significantDigits`\r\n   * significant digits using rounding mode `roundingMode`.\r\n   *\r\n   * If `significantDigits` is less than the number of digits necessary to represent the integer\r\n   * part of the value in normal (fixed-point) notation, then exponential notation is used.\r\n   *\r\n   * If `significantDigits` is omitted, or is `null` or `undefined`, then the return value is the\r\n   * same as `n.toString()`.\r\n   *\r\n   * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\r\n   *\r\n   * Throws if `significantDigits` or `roundingMode` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = 45.6\r\n   * y = new BigNumber(x)\r\n   * x.toPrecision()                 // '45.6'\r\n   * y.toPrecision()                 // '45.6'\r\n   * x.toPrecision(1)                // '5e+1'\r\n   * y.toPrecision(1)                // '5e+1'\r\n   * y.toPrecision(2, 0)             // '4.6e+1'  (ROUND_UP)\r\n   * y.toPrecision(2, 1)             // '4.5e+1'  (ROUND_DOWN)\r\n   * x.toPrecision(5)                // '45.600'\r\n   * y.toPrecision(5)                // '45.600'\r\n   * ```\r\n   *\r\n   * @param [significantDigits] Significant digits, integer, 1 to 1e+9.\r\n   * @param [roundingMode] Rounding mode, integer 0 to 8.\r\n   */\r\n  toPrecision(significantDigits: number, roundingMode?: BigNumber.RoundingMode): string;\r\n  toPrecision(): string;\r\n\r\n  /**\r\n   * Returns a string representing the value of this BigNumber in base `base`, or base 10 if `base`\r\n   * is omitted or is `null` or `undefined`.\r\n   *\r\n   * For bases above 10, and using the default base conversion alphabet (see `ALPHABET`), values\r\n   * from 10 to 35 are represented by a-z (the same as `Number.prototype.toString`).\r\n   *\r\n   * If a base is specified the value is rounded according to the current `DECIMAL_PLACES` and\r\n   * `ROUNDING_MODE` settings, otherwise it is not.\r\n   *\r\n   * If a base is not specified, and this BigNumber has a positive exponent that is equal to or\r\n   * greater than the positive component of the current `EXPONENTIAL_AT` setting, or a negative\r\n   * exponent equal to or less than the negative component of the setting, then exponential notation\r\n   * is returned.\r\n   *\r\n   * If `base` is `null` or `undefined` it is ignored.\r\n   *\r\n   * Throws if `base` is invalid.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(750000)\r\n   * x.toString()                    // '750000'\r\n   * BigNumber.config({ EXPONENTIAL_AT: 5 })\r\n   * x.toString()                    // '7.5e+5'\r\n   *\r\n   * y = new BigNumber(362.875)\r\n   * y.toString(2)                   // '101101010.111'\r\n   * y.toString(9)                   // '442.77777777777777777778'\r\n   * y.toString(32)                  // 'ba.s'\r\n   *\r\n   * BigNumber.config({ DECIMAL_PLACES: 4 });\r\n   * z = new BigNumber('1.23456789')\r\n   * z.toString()                    // '1.23456789'\r\n   * z.toString(10)                  // '1.2346'\r\n   * ```\r\n   *\r\n   * @param [base] The base, integer, 2 to 36 (or `ALPHABET.length`, see `ALPHABET`).\r\n   */\r\n  toString(base?: number): string;\r\n\r\n  /**\r\n   * As `toString`, but does not accept a base argument and includes the minus sign for negative\r\n   * zero.\r\n   *\r\n   * ``ts\r\n   * x = new BigNumber('-0')\r\n   * x.toString()                    // '0'\r\n   * x.valueOf()                     // '-0'\r\n   * y = new BigNumber('1.777e+457')\r\n   * y.valueOf()                     // '1.777e+457'\r\n   * ```\r\n   */\r\n  valueOf(): string;\r\n\r\n  /** Helps ES6 import. */\r\n  private static readonly default?: BigNumber.Constructor;\r\n\r\n  /** Helps ES6 import. */\r\n  private static readonly BigNumber?: BigNumber.Constructor;\r\n\r\n  /** Rounds away from zero. */\r\n  static readonly ROUND_UP: 0;\r\n\r\n  /** Rounds towards zero. */\r\n  static readonly ROUND_DOWN: 1;\r\n\r\n  /** Rounds towards Infinity. */\r\n  static readonly ROUND_CEIL: 2;\r\n\r\n  /** Rounds towards -Infinity. */\r\n  static readonly ROUND_FLOOR: 3;\r\n\r\n  /** Rounds towards nearest neighbour. If equidistant, rounds away from zero . */\r\n  static readonly ROUND_HALF_UP: 4;\r\n\r\n  /** Rounds towards nearest neighbour. If equidistant, rounds towards zero. */\r\n  static readonly ROUND_HALF_DOWN: 5;\r\n\r\n  /** Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour. */\r\n  static readonly ROUND_HALF_EVEN: 6;\r\n\r\n  /** Rounds towards nearest neighbour. If equidistant, rounds towards Infinity. */\r\n  static readonly ROUND_HALF_CEIL: 7;\r\n\r\n  /** Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity. */\r\n  static readonly ROUND_HALF_FLOOR: 8;\r\n\r\n  /** See `MODULO_MODE`. */\r\n  static readonly EUCLID: 9;\r\n\r\n  /**\r\n   * To aid in debugging, if a `BigNumber.DEBUG` property is `true` then an error will be thrown\r\n   * if the BigNumber constructor receives an invalid `BigNumber.Value`, or if `BigNumber.isBigNumber`\r\n   * receives a BigNumber instance that is malformed.\r\n   *\r\n   * ```ts\r\n   * // No error, and BigNumber NaN is returned.\r\n   * new BigNumber('blurgh')    // 'NaN'\r\n   * new BigNumber(9, 2)        // 'NaN'\r\n   * BigNumber.DEBUG = true\r\n   * new BigNumber('blurgh')    // '[BigNumber Error] Not a number'\r\n   * new BigNumber(9, 2)        // '[BigNumber Error] Not a base 2 number'\r\n   * ```\r\n   *\r\n   * An error will also be thrown if a `BigNumber.Value` is of type number with more than 15\r\n   * significant digits, as calling `toString` or `valueOf` on such numbers may not result\r\n   * in the intended value.\r\n   *\r\n   * ```ts\r\n   * console.log(823456789123456.3)       //  823456789123456.2\r\n   * // No error, and the returned BigNumber does not have the same value as the number literal.\r\n   * new BigNumber(823456789123456.3)     // '823456789123456.2'\r\n   * BigNumber.DEBUG = true\r\n   * new BigNumber(823456789123456.3)\r\n   * // '[BigNumber Error] Number primitive has more than 15 significant digits'\r\n   * ```\r\n   *\r\n   * Check that a BigNumber instance is well-formed:\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber(10)\r\n   *\r\n   * BigNumber.DEBUG = false\r\n   * // Change x.c to an illegitimate value.\r\n   * x.c = NaN\r\n   * // No error, as BigNumber.DEBUG is false.\r\n   * BigNumber.isBigNumber(x)    // true\r\n   *\r\n   * BigNumber.DEBUG = true\r\n   * BigNumber.isBigNumber(x)    // '[BigNumber Error] Invalid BigNumber'\r\n   * ```\r\n   */\r\n  static DEBUG?: boolean;\r\n\r\n  /**\r\n   * Returns a new independent BigNumber constructor with configuration as described by `object`, or\r\n   * with the default configuration if object is `null` or `undefined`.\r\n   *\r\n   * Throws if `object` is not an object.\r\n   *\r\n   * ```ts\r\n   * BigNumber.config({ DECIMAL_PLACES: 5 })\r\n   * BN = BigNumber.clone({ DECIMAL_PLACES: 9 })\r\n   *\r\n   * x = new BigNumber(1)\r\n   * y = new BN(1)\r\n   *\r\n   * x.div(3)                        // 0.33333\r\n   * y.div(3)                        // 0.333333333\r\n   *\r\n   * // BN = BigNumber.clone({ DECIMAL_PLACES: 9 }) is equivalent to:\r\n   * BN = BigNumber.clone()\r\n   * BN.config({ DECIMAL_PLACES: 9 })\r\n   * ```\r\n   *\r\n   * @param [object] The configuration object.\r\n   */\r\n  static clone(object?: BigNumber.Config): BigNumber.Constructor;\r\n\r\n  /**\r\n   * Configures the settings that apply to this BigNumber constructor.\r\n   *\r\n   * The configuration object, `object`, contains any number of the properties shown in the example\r\n   * below.\r\n   *\r\n   * Returns an object with the above properties and their current values.\r\n   *\r\n   * Throws if `object` is not an object, or if an invalid value is assigned to one or more of the\r\n   * properties.\r\n   *\r\n   * ```ts\r\n   * BigNumber.config({\r\n   *     DECIMAL_PLACES: 40,\r\n   *     ROUNDING_MODE: BigNumber.ROUND_HALF_CEIL,\r\n   *     EXPONENTIAL_AT: [-10, 20],\r\n   *     RANGE: [-500, 500],\r\n   *     CRYPTO: true,\r\n   *     MODULO_MODE: BigNumber.ROUND_FLOOR,\r\n   *     POW_PRECISION: 80,\r\n   *     FORMAT: {\r\n   *         groupSize: 3,\r\n   *         groupSeparator: ' ',\r\n   *         decimalSeparator: ','\r\n   *     },\r\n   *     ALPHABET: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n   * });\r\n   *\r\n   * BigNumber.config().DECIMAL_PLACES        // 40\r\n   * ```\r\n   *\r\n   * @param object The configuration object.\r\n   */\r\n  static config(object: BigNumber.Config): BigNumber.Config;\r\n\r\n  /**\r\n   * Returns `true` if `value` is a BigNumber instance, otherwise returns `false`.\r\n   *\r\n   * If `BigNumber.DEBUG` is `true`, throws if a BigNumber instance is not well-formed.\r\n   *\r\n   * ```ts\r\n   * x = 42\r\n   * y = new BigNumber(x)\r\n   *\r\n   * BigNumber.isBigNumber(x)             // false\r\n   * y instanceof BigNumber               // true\r\n   * BigNumber.isBigNumber(y)             // true\r\n   *\r\n   * BN = BigNumber.clone();\r\n   * z = new BN(x)\r\n   * z instanceof BigNumber               // false\r\n   * BigNumber.isBigNumber(z)             // true\r\n   * ```\r\n   *\r\n   * @param value The value to test.\r\n   */\r\n  static isBigNumber(value: any): value is BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber('3257869345.0378653')\r\n   * BigNumber.maximum(4e9, x, '123456789.9')      // '4000000000'\r\n   *\r\n   * arr = [12, '13', new BigNumber(14)]\r\n   * BigNumber.maximum.apply(null, arr)            // '14'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   */\r\n  static maximum(...n: BigNumber.Value[]): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber('3257869345.0378653')\r\n   * BigNumber.max(4e9, x, '123456789.9')      // '4000000000'\r\n   *\r\n   * arr = [12, '13', new BigNumber(14)]\r\n   * BigNumber.max.apply(null, arr)            // '14'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   */\r\n  static max(...n: BigNumber.Value[]): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber('3257869345.0378653')\r\n   * BigNumber.minimum(4e9, x, '123456789.9')          // '123456789.9'\r\n   *\r\n   * arr = [2, new BigNumber(-14), '-15.9999', -12]\r\n   * BigNumber.minimum.apply(null, arr)                // '-15.9999'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   */\r\n  static minimum(...n: BigNumber.Value[]): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber('3257869345.0378653')\r\n   * BigNumber.min(4e9, x, '123456789.9')             // '123456789.9'\r\n   *\r\n   * arr = [2, new BigNumber(-14), '-15.9999', -12]\r\n   * BigNumber.min.apply(null, arr)                   // '-15.9999'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   */\r\n  static min(...n: BigNumber.Value[]): BigNumber;\r\n\r\n  /**\r\n   * Returns a new BigNumber with a pseudo-random value equal to or greater than 0 and less than 1.\r\n   *\r\n   * The return value will have `decimalPlaces` decimal places, or less if trailing zeros are\r\n   * produced. If `decimalPlaces` is omitted, the current `DECIMAL_PLACES` setting will be used.\r\n   *\r\n   * Depending on the value of this BigNumber constructor's `CRYPTO` setting and the support for the\r\n   * `crypto` object in the host environment, the random digits of the return value are generated by\r\n   * either `Math.random` (fastest), `crypto.getRandomValues` (Web Cryptography API in recent\r\n   * browsers) or `crypto.randomBytes` (Node.js).\r\n   *\r\n   * To be able to set `CRYPTO` to true when using Node.js, the `crypto` object must be available\r\n   * globally:\r\n   *\r\n   * ```ts\r\n   * global.crypto = require('crypto')\r\n   * ```\r\n   *\r\n   * If `CRYPTO` is true, i.e. one of the `crypto` methods is to be used, the value of a returned\r\n   * BigNumber should be cryptographically secure and statistically indistinguishable from a random\r\n   * value.\r\n   *\r\n   * Throws if `decimalPlaces` is invalid.\r\n   *\r\n   * ```ts\r\n   * BigNumber.config({ DECIMAL_PLACES: 10 })\r\n   * BigNumber.random()              // '0.4117936847'\r\n   * BigNumber.random(20)            // '0.78193327636914089009'\r\n   * ```\r\n   *\r\n   * @param [decimalPlaces] Decimal places, integer, 0 to 1e+9.\r\n   */\r\n  static random(decimalPlaces?: number): BigNumber;\r\n\r\n  /**\r\n   * Returns a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * The return value is always exact and unrounded.\r\n   *\r\n   * ```ts\r\n   * x = new BigNumber('3257869345.0378653')\r\n   * BigNumber.sum(4e9, x, '123456789.9')      // '7381326134.9378653'\r\n   *\r\n   * arr = [2, new BigNumber(14), '15.9999', 12]\r\n   * BigNumber.sum.apply(null, arr)            // '43.9999'\r\n   * ```\r\n   *\r\n   * @param n A numeric value.\r\n   */\r\n  static sum(...n: BigNumber.Value[]): BigNumber;\r\n\r\n  /**\r\n   * Configures the settings that apply to this BigNumber constructor.\r\n   *\r\n   * The configuration object, `object`, contains any number of the properties shown in the example\r\n   * below.\r\n   *\r\n   * Returns an object with the above properties and their current values.\r\n   *\r\n   * Throws if `object` is not an object, or if an invalid value is assigned to one or more of the\r\n   * properties.\r\n   *\r\n   * ```ts\r\n   * BigNumber.set({\r\n   *     DECIMAL_PLACES: 40,\r\n   *     ROUNDING_MODE: BigNumber.ROUND_HALF_CEIL,\r\n   *     EXPONENTIAL_AT: [-10, 20],\r\n   *     RANGE: [-500, 500],\r\n   *     CRYPTO: true,\r\n   *     MODULO_MODE: BigNumber.ROUND_FLOOR,\r\n   *     POW_PRECISION: 80,\r\n   *     FORMAT: {\r\n   *         groupSize: 3,\r\n   *         groupSeparator: ' ',\r\n   *         decimalSeparator: ','\r\n   *     },\r\n   *     ALPHABET: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n   * });\r\n   *\r\n   * BigNumber.set().DECIMAL_PLACES        // 40\r\n   * ```\r\n   *\r\n   * @param object The configuration object.\r\n   */\r\n  static set(object: BigNumber.Config): BigNumber.Config;\r\n}\r\n\r\nexport function BigNumber(n: BigNumber.Value, base?: number): BigNumber;\r\n"},70637:e=>{e.exports='interface ObjectConstructor {\n  /**\n   * Determines whether an object has a property with the specified name.\n   * @param o An object.\n   * @param v A property name.\n   */\n  hasOwn(o: object, v: PropertyKey): boolean;\n}\n\ninterface BigIntToLocaleStringOptions {\n  /**\n   * The locale matching algorithm to use.The default is "best fit". For information about this option, see the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.\n   */\n  localeMatcher?: string;\n  /**\n   * The formatting style to use , the default is "decimal".\n   */\n  style?: string;\n\n  numberingSystem?: string;\n  /**\n   * The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with "-per-" to make a compound unit. There is no default value; if the style is "unit", the unit property must be provided.\n   */\n  unit?: string;\n\n  /**\n   * The unit formatting style to use in unit formatting, the defaults is "short".\n   */\n  unitDisplay?: string;\n\n  /**\n   * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB \u2014 see the Current currency & funds code list. There is no default value; if the style is "currency", the currency property must be provided. It is only used when [[Style]] has the value "currency".\n   */\n  currency?: string;\n\n  /**\n   * How to display the currency in currency formatting. It is only used when [[Style]] has the value "currency". The default is "symbol".\n   *\n   * "symbol" to use a localized currency symbol such as \u20ac,\n   *\n   * "code" to use the ISO currency code,\n   *\n   * "name" to use a localized currency name such as "dollar"\n   */\n  currencyDisplay?: string;\n\n  /**\n   * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true.\n   */\n  useGrouping?: boolean;\n\n  /**\n   * The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n   */\n  minimumIntegerDigits?:\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20\n    | 21;\n\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information).\n   */\n  minimumFractionDigits?:\n    | 0\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20;\n\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.\n   */\n  maximumFractionDigits?:\n    | 0\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20;\n\n  /**\n   * The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n   */\n  minimumSignificantDigits?:\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20\n    | 21;\n\n  /**\n   * The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.\n   */\n  maximumSignificantDigits?:\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20\n    | 21;\n\n  /**\n   * The formatting that should be displayed for the number, the defaults is "standard"\n   *\n   *     "standard" plain number formatting\n   *\n   *     "scientific" return the order-of-magnitude for formatted number.\n   *\n   *     "engineering" return the exponent of ten when divisible by three\n   *\n   *     "compact" string representing exponent, defaults is using the "short" form\n   */\n  notation?: string;\n\n  /**\n   * used only when notation is "compact"\n   */\n  compactDisplay?: string;\n}\n\ninterface BigInt {\n  /**\n   * Returns a string representation of an object.\n   * @param radix Specifies a radix for converting numeric values to strings.\n   */\n  toString(radix?: number): string;\n\n  /** Returns a string representation appropriate to the host environment\'s current locale. */\n  toLocaleString(\n    locales?: Intl.LocalesArgument,\n    options?: BigIntToLocaleStringOptions,\n  ): string;\n\n  /** Returns the primitive value of the specified object. */\n  valueOf(): bigint;\n\n  readonly [Symbol.toStringTag]: \'BigInt\';\n}\n\ninterface BigIntConstructor {\n  (value: bigint | boolean | number | string): bigint;\n  readonly prototype: BigInt;\n\n  /**\n   * Interprets the low bits of a BigInt as a 2\'s-complement signed integer.\n   * All higher bits are discarded.\n   * @param bits The number of low bits to use\n   * @param int The BigInt whose bits to extract\n   */\n  asIntN(bits: number, int: bigint): bigint;\n  /**\n   * Interprets the low bits of a BigInt as an unsigned integer.\n   * All higher bits are discarded.\n   * @param bits The number of low bits to use\n   * @param int The BigInt whose bits to extract\n   */\n  asUintN(bits: number, int: bigint): bigint;\n}\n\ndeclare var BigInt: BigIntConstructor;\n\n/**\n * A typed array of 64-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigInt64Array {\n  /** The size in bytes of each element in the array. */\n  readonly BYTES_PER_ELEMENT: number;\n\n  /** The ArrayBuffer instance referenced by the array. */\n  readonly buffer: ArrayBufferLike;\n\n  /** The length in bytes of the array. */\n  readonly byteLength: number;\n\n  /** The offset in bytes of the array. */\n  readonly byteOffset: number;\n\n  /**\n   * Returns the this object after copying a section of the array identified by start and end\n   * to the same array starting at position target\n   * @param target If target is negative, it is treated as length+target where length is the\n   * length of the array.\n   * @param start If start is negative, it is treated as length+start. If end is negative, it\n   * is treated as length+end.\n   * @param end If not specified, length of the this object is used as its default value.\n   */\n  copyWithin(target: number, start: number, end?: number): this;\n\n  /** Yields index, value pairs for every entry in the array. */\n  entries(): IterableIterator<[number, bigint]>;\n\n  /**\n   * Determines whether all the members of an array satisfy the specified test.\n   * @param predicate A function that accepts up to three arguments. The every method calls\n   * the predicate function for each element in the array until the predicate returns false,\n   * or until the end of the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  every(\n    predicate: (value: bigint, index: number, array: BigInt64Array) => boolean,\n    thisArg?: any,\n  ): boolean;\n\n  /**\n   * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n   * @param value value to fill array section with\n   * @param start index to start filling the array at. If start is negative, it is treated as\n   * length+start where length is the length of the array.\n   * @param end index to stop filling the array at. If end is negative, it is treated as\n   * length+end.\n   */\n  fill(value: bigint, start?: number, end?: number): this;\n\n  /**\n   * Returns the elements of an array that meet the condition specified in a callback function.\n   * @param predicate A function that accepts up to three arguments. The filter method calls\n   * the predicate function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  filter(\n    predicate: (value: bigint, index: number, array: BigInt64Array) => any,\n    thisArg?: any,\n  ): BigInt64Array;\n\n  /**\n   * Returns the value of the first element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  find(\n    predicate: (value: bigint, index: number, array: BigInt64Array) => boolean,\n    thisArg?: any,\n  ): bigint | undefined;\n\n  /**\n   * Returns the index of the first element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndex(\n    predicate: (value: bigint, index: number, array: BigInt64Array) => boolean,\n    thisArg?: any,\n  ): number;\n\n  /**\n   * Performs the specified action for each element in an array.\n   * @param callbackfn A function that accepts up to three arguments. forEach calls the\n   * callbackfn function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  forEach(\n    callbackfn: (value: bigint, index: number, array: BigInt64Array) => void,\n    thisArg?: any,\n  ): void;\n\n  /**\n   * Determines whether an array includes a certain element, returning true or false as appropriate.\n   * @param searchElement The element to search for.\n   * @param fromIndex The position in this array at which to begin searching for searchElement.\n   */\n  includes(searchElement: bigint, fromIndex?: number): boolean;\n\n  /**\n   * Returns the index of the first occurrence of a value in an array.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n   * search starts at index 0.\n   */\n  indexOf(searchElement: bigint, fromIndex?: number): number;\n\n  /**\n   * Adds all the elements of an array separated by the specified separator string.\n   * @param separator A string used to separate one element of an array from the next in the\n   * resulting String. If omitted, the array elements are separated with a comma.\n   */\n  join(separator?: string): string;\n\n  /** Yields each index in the array. */\n  keys(): IterableIterator<number>;\n\n  /**\n   * Returns the index of the last occurrence of a value in an array.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n   * search starts at index 0.\n   */\n  lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n  /** The length of the array. */\n  readonly length: number;\n\n  /**\n   * Calls a defined callback function on each element of an array, and returns an array that\n   * contains the results.\n   * @param callbackfn A function that accepts up to three arguments. The map method calls the\n   * callbackfn function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  map(\n    callbackfn: (value: bigint, index: number, array: BigInt64Array) => bigint,\n    thisArg?: any,\n  ): BigInt64Array;\n\n  /**\n   * Calls the specified callback function for all the elements in an array. The return value of\n   * the callback function is the accumulated result, and is provided as an argument in the next\n   * call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n   * callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduce(\n    callbackfn: (\n      previousValue: bigint,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigInt64Array,\n    ) => bigint,\n  ): bigint;\n\n  /**\n   * Calls the specified callback function for all the elements in an array. The return value of\n   * the callback function is the accumulated result, and is provided as an argument in the next\n   * call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n   * callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduce<U>(\n    callbackfn: (\n      previousValue: U,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigInt64Array,\n    ) => U,\n    initialValue: U,\n  ): U;\n\n  /**\n   * Calls the specified callback function for all the elements in an array, in descending order.\n   * The return value of the callback function is the accumulated result, and is provided as an\n   * argument in the next call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n   * the callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an\n   * argument instead of an array value.\n   */\n  reduceRight(\n    callbackfn: (\n      previousValue: bigint,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigInt64Array,\n    ) => bigint,\n  ): bigint;\n\n  /**\n   * Calls the specified callback function for all the elements in an array, in descending order.\n   * The return value of the callback function is the accumulated result, and is provided as an\n   * argument in the next call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n   * the callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduceRight<U>(\n    callbackfn: (\n      previousValue: U,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigInt64Array,\n    ) => U,\n    initialValue: U,\n  ): U;\n\n  /** Reverses the elements in the array. */\n  reverse(): this;\n\n  /**\n   * Sets a value or an array of values.\n   * @param array A typed or untyped array of values to set.\n   * @param offset The index in the current array at which the values are to be written.\n   */\n  set(array: ArrayLike<bigint>, offset?: number): void;\n\n  /**\n   * Returns a section of an array.\n   * @param start The beginning of the specified portion of the array.\n   * @param end The end of the specified portion of the array.\n   */\n  slice(start?: number, end?: number): BigInt64Array;\n\n  /**\n   * Determines whether the specified callback function returns true for any element of an array.\n   * @param predicate A function that accepts up to three arguments. The some method calls the\n   * predicate function for each element in the array until the predicate returns true, or until\n   * the end of the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  some(\n    predicate: (value: bigint, index: number, array: BigInt64Array) => boolean,\n    thisArg?: any,\n  ): boolean;\n\n  /**\n   * Sorts the array.\n   * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n   */\n  sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n  /**\n   * Gets a new BigInt64Array view of the ArrayBuffer store for this array, referencing the elements\n   * at begin, inclusive, up to end, exclusive.\n   * @param begin The index of the beginning of the array.\n   * @param end The index of the end of the array.\n   */\n  subarray(begin?: number, end?: number): BigInt64Array;\n\n  /** Converts the array to a string by using the current locale. */\n  toLocaleString(): string;\n\n  /** Returns a string representation of the array. */\n  toString(): string;\n\n  /** Returns the primitive value of the specified object. */\n  valueOf(): BigInt64Array;\n\n  /** Yields each value in the array. */\n  values(): IterableIterator<bigint>;\n\n  [Symbol.iterator](): IterableIterator<bigint>;\n\n  readonly [Symbol.toStringTag]: \'BigInt64Array\';\n\n  [index: number]: bigint;\n}\n\ninterface BigInt64ArrayConstructor {\n  readonly prototype: BigInt64Array;\n  new (length?: number): BigInt64Array;\n  new (array: Iterable<bigint>): BigInt64Array;\n  new (\n    buffer: ArrayBufferLike,\n    byteOffset?: number,\n    length?: number,\n  ): BigInt64Array;\n\n  /** The size in bytes of each element in the array. */\n  readonly BYTES_PER_ELEMENT: number;\n\n  /**\n   * Returns a new array from a set of elements.\n   * @param items A set of elements to include in the new array object.\n   */\n  of(...items: bigint[]): BigInt64Array;\n\n  /**\n   * Creates an array from an array-like or iterable object.\n   * @param arrayLike An array-like or iterable object to convert to an array.\n   * @param mapfn A mapping function to call on every element of the array.\n   * @param thisArg Value of \'this\' used to invoke the mapfn.\n   */\n  from(arrayLike: ArrayLike<bigint>): BigInt64Array;\n  from<U>(\n    arrayLike: ArrayLike<U>,\n    mapfn: (v: U, k: number) => bigint,\n    thisArg?: any,\n  ): BigInt64Array;\n}\n\ndeclare var BigInt64Array: BigInt64ArrayConstructor;\n\n/**\n * A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigUint64Array {\n  /** The size in bytes of each element in the array. */\n  readonly BYTES_PER_ELEMENT: number;\n\n  /** The ArrayBuffer instance referenced by the array. */\n  readonly buffer: ArrayBufferLike;\n\n  /** The length in bytes of the array. */\n  readonly byteLength: number;\n\n  /** The offset in bytes of the array. */\n  readonly byteOffset: number;\n\n  /**\n   * Returns the this object after copying a section of the array identified by start and end\n   * to the same array starting at position target\n   * @param target If target is negative, it is treated as length+target where length is the\n   * length of the array.\n   * @param start If start is negative, it is treated as length+start. If end is negative, it\n   * is treated as length+end.\n   * @param end If not specified, length of the this object is used as its default value.\n   */\n  copyWithin(target: number, start: number, end?: number): this;\n\n  /** Yields index, value pairs for every entry in the array. */\n  entries(): IterableIterator<[number, bigint]>;\n\n  /**\n   * Determines whether all the members of an array satisfy the specified test.\n   * @param predicate A function that accepts up to three arguments. The every method calls\n   * the predicate function for each element in the array until the predicate returns false,\n   * or until the end of the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  every(\n    predicate: (value: bigint, index: number, array: BigUint64Array) => boolean,\n    thisArg?: any,\n  ): boolean;\n\n  /**\n   * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n   * @param value value to fill array section with\n   * @param start index to start filling the array at. If start is negative, it is treated as\n   * length+start where length is the length of the array.\n   * @param end index to stop filling the array at. If end is negative, it is treated as\n   * length+end.\n   */\n  fill(value: bigint, start?: number, end?: number): this;\n\n  /**\n   * Returns the elements of an array that meet the condition specified in a callback function.\n   * @param predicate A function that accepts up to three arguments. The filter method calls\n   * the predicate function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  filter(\n    predicate: (value: bigint, index: number, array: BigUint64Array) => any,\n    thisArg?: any,\n  ): BigUint64Array;\n\n  /**\n   * Returns the value of the first element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  find(\n    predicate: (value: bigint, index: number, array: BigUint64Array) => boolean,\n    thisArg?: any,\n  ): bigint | undefined;\n\n  /**\n   * Returns the index of the first element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndex(\n    predicate: (value: bigint, index: number, array: BigUint64Array) => boolean,\n    thisArg?: any,\n  ): number;\n\n  /**\n   * Performs the specified action for each element in an array.\n   * @param callbackfn A function that accepts up to three arguments. forEach calls the\n   * callbackfn function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  forEach(\n    callbackfn: (value: bigint, index: number, array: BigUint64Array) => void,\n    thisArg?: any,\n  ): void;\n\n  /**\n   * Determines whether an array includes a certain element, returning true or false as appropriate.\n   * @param searchElement The element to search for.\n   * @param fromIndex The position in this array at which to begin searching for searchElement.\n   */\n  includes(searchElement: bigint, fromIndex?: number): boolean;\n\n  /**\n   * Returns the index of the first occurrence of a value in an array.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n   * search starts at index 0.\n   */\n  indexOf(searchElement: bigint, fromIndex?: number): number;\n\n  /**\n   * Adds all the elements of an array separated by the specified separator string.\n   * @param separator A string used to separate one element of an array from the next in the\n   * resulting String. If omitted, the array elements are separated with a comma.\n   */\n  join(separator?: string): string;\n\n  /** Yields each index in the array. */\n  keys(): IterableIterator<number>;\n\n  /**\n   * Returns the index of the last occurrence of a value in an array.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n   * search starts at index 0.\n   */\n  lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n  /** The length of the array. */\n  readonly length: number;\n\n  /**\n   * Calls a defined callback function on each element of an array, and returns an array that\n   * contains the results.\n   * @param callbackfn A function that accepts up to three arguments. The map method calls the\n   * callbackfn function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  map(\n    callbackfn: (value: bigint, index: number, array: BigUint64Array) => bigint,\n    thisArg?: any,\n  ): BigUint64Array;\n\n  /**\n   * Calls the specified callback function for all the elements in an array. The return value of\n   * the callback function is the accumulated result, and is provided as an argument in the next\n   * call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n   * callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduce(\n    callbackfn: (\n      previousValue: bigint,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigUint64Array,\n    ) => bigint,\n  ): bigint;\n\n  /**\n   * Calls the specified callback function for all the elements in an array. The return value of\n   * the callback function is the accumulated result, and is provided as an argument in the next\n   * call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n   * callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduce<U>(\n    callbackfn: (\n      previousValue: U,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigUint64Array,\n    ) => U,\n    initialValue: U,\n  ): U;\n\n  /**\n   * Calls the specified callback function for all the elements in an array, in descending order.\n   * The return value of the callback function is the accumulated result, and is provided as an\n   * argument in the next call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n   * the callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an\n   * argument instead of an array value.\n   */\n  reduceRight(\n    callbackfn: (\n      previousValue: bigint,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigUint64Array,\n    ) => bigint,\n  ): bigint;\n\n  /**\n   * Calls the specified callback function for all the elements in an array, in descending order.\n   * The return value of the callback function is the accumulated result, and is provided as an\n   * argument in the next call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n   * the callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduceRight<U>(\n    callbackfn: (\n      previousValue: U,\n      currentValue: bigint,\n      currentIndex: number,\n      array: BigUint64Array,\n    ) => U,\n    initialValue: U,\n  ): U;\n\n  /** Reverses the elements in the array. */\n  reverse(): this;\n\n  /**\n   * Sets a value or an array of values.\n   * @param array A typed or untyped array of values to set.\n   * @param offset The index in the current array at which the values are to be written.\n   */\n  set(array: ArrayLike<bigint>, offset?: number): void;\n\n  /**\n   * Returns a section of an array.\n   * @param start The beginning of the specified portion of the array.\n   * @param end The end of the specified portion of the array.\n   */\n  slice(start?: number, end?: number): BigUint64Array;\n\n  /**\n   * Determines whether the specified callback function returns true for any element of an array.\n   * @param predicate A function that accepts up to three arguments. The some method calls the\n   * predicate function for each element in the array until the predicate returns true, or until\n   * the end of the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  some(\n    predicate: (value: bigint, index: number, array: BigUint64Array) => boolean,\n    thisArg?: any,\n  ): boolean;\n\n  /**\n   * Sorts the array.\n   * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n   */\n  sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n  /**\n   * Gets a new BigUint64Array view of the ArrayBuffer store for this array, referencing the elements\n   * at begin, inclusive, up to end, exclusive.\n   * @param begin The index of the beginning of the array.\n   * @param end The index of the end of the array.\n   */\n  subarray(begin?: number, end?: number): BigUint64Array;\n\n  /** Converts the array to a string by using the current locale. */\n  toLocaleString(): string;\n\n  /** Returns a string representation of the array. */\n  toString(): string;\n\n  /** Returns the primitive value of the specified object. */\n  valueOf(): BigUint64Array;\n\n  /** Yields each value in the array. */\n  values(): IterableIterator<bigint>;\n\n  [Symbol.iterator](): IterableIterator<bigint>;\n\n  readonly [Symbol.toStringTag]: \'BigUint64Array\';\n\n  [index: number]: bigint;\n}\n\ninterface BigUint64ArrayConstructor {\n  readonly prototype: BigUint64Array;\n  new (length?: number): BigUint64Array;\n  new (array: Iterable<bigint>): BigUint64Array;\n  new (\n    buffer: ArrayBufferLike,\n    byteOffset?: number,\n    length?: number,\n  ): BigUint64Array;\n\n  /** The size in bytes of each element in the array. */\n  readonly BYTES_PER_ELEMENT: number;\n\n  /**\n   * Returns a new array from a set of elements.\n   * @param items A set of elements to include in the new array object.\n   */\n  of(...items: bigint[]): BigUint64Array;\n\n  /**\n   * Creates an array from an array-like or iterable object.\n   * @param arrayLike An array-like or iterable object to convert to an array.\n   * @param mapfn A mapping function to call on every element of the array.\n   * @param thisArg Value of \'this\' used to invoke the mapfn.\n   */\n  from(arrayLike: ArrayLike<bigint>): BigUint64Array;\n  from<U>(\n    arrayLike: ArrayLike<U>,\n    mapfn: (v: U, k: number) => bigint,\n    thisArg?: any,\n  ): BigUint64Array;\n}\n\ndeclare var BigUint64Array: BigUint64ArrayConstructor;\n\ninterface DataView {\n  /**\n   * Gets the BigInt64 value at the specified byte offset from the start of the view. There is\n   * no alignment constraint; multi-byte values may be fetched from any offset.\n   * @param byteOffset The place in the buffer at which the value should be retrieved.\n   * @param littleEndian If false or undefined, a big-endian value should be read.\n   */\n  getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;\n\n  /**\n   * Gets the BigUint64 value at the specified byte offset from the start of the view. There is\n   * no alignment constraint; multi-byte values may be fetched from any offset.\n   * @param byteOffset The place in the buffer at which the value should be retrieved.\n   * @param littleEndian If false or undefined, a big-endian value should be read.\n   */\n  getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;\n\n  /**\n   * Stores a BigInt64 value at the specified byte offset from the start of the view.\n   * @param byteOffset The place in the buffer at which the value should be set.\n   * @param value The value to set.\n   * @param littleEndian If false or undefined, a big-endian value should be written.\n   */\n  setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n\n  /**\n   * Stores a BigUint64 value at the specified byte offset from the start of the view.\n   * @param byteOffset The place in the buffer at which the value should be set.\n   * @param value The value to set.\n   * @param littleEndian If false or undefined, a big-endian value should be written.\n   */\n  setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n}\n\ndeclare namespace Intl {\n  interface NumberFormat {\n    format(value: number | bigint): string;\n    resolvedOptions(): ResolvedNumberFormatOptions;\n  }\n}\n'},7712:e=>{e.exports="\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\nimport { Interaction as SchedulerInteraction } from 'scheduler/tracing';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n// Destructors are only allowed to return void.\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\n\n// eslint-disable-next-line export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    type ElementType<P = any> =\n        {\n            [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n        }[keyof JSX.IntrinsicElements] |\n        ComponentType<P>;\n    /**\n     * @deprecated Please use `ElementType`\n     */\n    type ReactType<P = any> = ElementType<P>;\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    type JSXElementConstructor<P> =\n        | ((props: P) => ReactElement<any, any> | null)\n        | (new (props: P) => Component<any, any>);\n\n    interface RefObject<T> {\n        readonly current: T | null;\n    }\n    // Bivariance hack for consistent unsoundness with RefObject\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    type LegacyRef<T> = string | Ref<T>;\n    /**\n     * Gets the instance type for a React element. The instance will be different for various component types:\n     *\n     * - React class components will be the class instance. So if you had `class Foo extends React.Component<{}> {}`\n     *   and used `React.ElementRef<typeof Foo>` then the type would be the instance of `Foo`.\n     * - React stateless functional components do not have a backing instance and so `React.ElementRef<typeof Bar>`\n     *   (when `Bar` is `function Bar() {}`) will give you the `undefined` type.\n     * - JSX intrinsics like `div` will give you their DOM instance. For `React.ElementRef<'div'>` that would be\n     *   `HTMLDivElement`. For `React.ElementRef<'input'>` that would be `HTMLInputElement`.\n     * - React stateless functional components that forward a `ref` will give you the `ElementRef` of the forwarded\n     *   to component.\n     *\n     * `C` must be the type _of_ a React component so you need to use typeof as in `React.ElementRef<typeof MyComponent>`.\n     *\n     * @todo In Flow, this works a little different with forwarded refs and the `AbstractComponent` that\n     *       `React.forwardRef()` returns.\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new (props: any): Component<any> }\n            | ((props: any, context?: any) => ReactElement | null)\n            | keyof JSX.IntrinsicElements\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\n                infer Instance\n            >\n                ? Instance\n                : never\n            : never;\n\n    type ComponentState = any;\n\n    type Key = string | number;\n\n    /**\n     * @internal You shouldn't need to use this type since you never see these attributes\n     * inside your component or have to validate them.\n     */\n    interface Attributes {\n        key?: Key | null | undefined;\n    }\n    interface RefAttributes<T> extends Attributes {\n        ref?: Ref<T> | undefined;\n    }\n    interface ClassAttributes<T> extends Attributes {\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n        type: T;\n        props: P;\n        key: Key | null;\n    }\n\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n    > extends ReactElement<P, Exclude<T, number>> { }\n\n    /**\n     * @deprecated Please use `FunctionComponentElement`\n     */\n    type SFCElement<P> = FunctionComponentElement<P>;\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: ('ref' extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        key: Key | null;\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> =\n        (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n    }\n\n    //\n    // React Nodes\n    // http://facebook.github.io/react/docs/glossary.html\n    // ----------------------------------------------------------------------\n\n    type ReactText = string | number;\n    type ReactChild = ReactElement | ReactText;\n\n    /**\n     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.\n     */\n    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}\n    type ReactFragment = {} | Iterable<ReactNode>;\n    type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function createElement<P extends {}>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n        props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n        ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // Context via RenderProps\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode | undefined;\n    }\n\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n    // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n    // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n    // by pretending to be a normal component.\n    //\n    // We don't just use ComponentType or FunctionComponent types because you are not supposed to attach statics to this\n    // object, but rather to the original function.\n    interface ExoticComponent<P = {}> {\n        /**\n         * **NOTE**: Exotic components are not callable.\n         */\n        (props: P): (ReactElement|null);\n        readonly $$typeof: symbol;\n    }\n\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        displayName?: string | undefined;\n    }\n\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    // NOTE: only the Context object itself can get a displayName\n    // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        displayName?: string | undefined;\n    }\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    const Children: ReactChildren;\n    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;\n    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    interface SuspenseProps {\n        children?: ReactNode | undefined;\n\n        // TODO(react18): `fallback?: ReactNode;`\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback: NonNullable<ReactNode>|null;\n    }\n\n    // TODO(react18): Updated JSDoc to reflect that Suspense works on the server.\n    /**\n     * This feature is not yet available for server-side rendering.\n     * Suspense support will be added in a later release.\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * {@link https://reactjs.org/docs/profiler.html#onrender-callback Profiler API}\n     */\n    type ProfilerOnRenderCallback = (\n        id: string,\n        phase: \"mount\" | \"update\",\n        actualDuration: number,\n        baseDuration: number,\n        startTime: number,\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n    interface ProfilerProps {\n        children?: ReactNode | undefined;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n    class Component<P, S> {\n        // tslint won't let me format the sample code in a way that vscode likes it :(\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * Usage:\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see https://reactjs.org/docs/context.html#classcontexttype\n         */\n        static contextType?: Context<any> | undefined;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see https://reactjs.org/docs/context.html\n         */\n        // TODO (TypeScript 3.0): unknown\n        context: any;\n\n        constructor(props: Readonly<P> | P);\n        /**\n         * @deprecated\n         * @see https://reactjs.org/docs/legacy-context.html\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n            callback?: () => void\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        // React.Props<T> is now deprecated, which means that the `children`\n        // property is not available on `P` by default, even though you can\n        // always pass children as variadic arguments to `createElement`.\n        // In the future, if we can define its call signature conditionally\n        // on the existence of `children` in `P`, then we should remove this.\n        readonly props: Readonly<P> & Readonly<{ children?: ReactNode | undefined }>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         * https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n         */\n        refs: {\n            [key: string]: ReactInstance\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use `FunctionComponent` instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type SFC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use `FunctionComponent` instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type StatelessComponent<P = {}> = FunctionComponent<P>;\n\n    type FC<P = {}> = FunctionComponent<P>;\n\n    interface FunctionComponent<P = {}> {\n        (props: PropsWithChildren<P>, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: PropsWithChildren<P>, ref: ForwardedRef<T>): ReactElement | null;\n        displayName?: string | undefined;\n        // explicit rejected with `never` required due to\n        // https://github.com/microsoft/TypeScript/issues/36826\n        /**\n         * defaultProps are not supported on render functions\n         */\n        defaultProps?: never | undefined;\n        /**\n         * propTypes are not supported on render functions\n         */\n        propTypes?: never | undefined;\n    }\n\n    /**\n     * @deprecated Use ForwardRefRenderFunction. forwardRef doesn't accept a\n     *             \"real\" component.\n     */\n    interface RefForwardingComponent <T, P = {}> extends ForwardRefRenderFunction<T, P> {}\n\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new (props: P, context?: any): Component<P, S>;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextType?: Context<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * We use an intersection type to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        C &\n        (new (props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, `Component#render`, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of `render` to the document, and\n         * returns an object to be given to componentDidUpdate. Useful for saving\n         * things such as scroll position before `render` causes changes to it.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>> | undefined;\n        statics?: {\n            [key: string]: any;\n        } | undefined;\n\n        displayName?: string | undefined;\n        propTypes?: ValidationMap<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    // will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P> | undefined;\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /** Ensures that the props do not include ref at all */\n    type PropsWithoutRef<P> =\n        // Pick would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.\n        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        P extends any ? ('ref' extends keyof P ? Pick<P, Exclude<keyof P, 'ref'>> : P) : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        'ref' extends keyof P\n            ? P extends { ref?: infer R | undefined }\n                ? string extends R\n                    ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }\n                    : P\n                : P\n            : P;\n\n    type PropsWithChildren<P> = P & { children?: ReactNode | undefined };\n\n    /**\n     * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n     * or ComponentPropsWithoutRef when refs are not supported.\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n        T extends JSXElementConstructor<infer P>\n            ? P\n            : T extends keyof JSX.IntrinsicElements\n                ? JSX.IntrinsicElements[T]\n                : {};\n    type ComponentPropsWithRef<T extends ElementType> =\n        T extends (new (props: infer P) => Component<any, any>)\n            ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n            : PropsWithRef<ComponentProps<T>>;\n    type ComponentPropsWithoutRef<T extends ElementType> =\n        PropsWithoutRef<ComponentProps<T>>;\n\n    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<\n        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>\n    >\n        ? Method\n        : ComponentPropsWithRef<T> extends RefAttributes<infer Method>\n            ? Method\n            : never;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    function memo<P extends object>(\n        Component: FunctionComponent<P>,\n        propsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n    ): MemoExoticComponent<T>;\n\n    type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly _result: T;\n    };\n\n    function lazy<T extends ComponentType<any>>(\n        factory: () => Promise<{ default: T }>\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    // based on the code in https://github.com/facebook/react/pull/13968\n\n    // Unlike the class component setState, the updates are not allowed to be partial\n    type SetStateAction<S> = S | ((prevState: S) => S);\n    // this technically does accept a second argument, but it's already under a deprecation warning\n    // and it's not even released so probably better to not define it.\n    type Dispatch<A> = (value: A) => void;\n    // Since action _can_ be undefined, dispatch may be called without any parameters.\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\n        R extends ReducerWithoutAction<infer S> ? S : never;\n    // TODO (TypeScript 3.0): ReadonlyArray<unknown>\n    type DependencyList = ReadonlyArray<any>;\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    type EffectCallback = () => (void | Destructor);\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecontext\n     */\n    function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It\u2019s handy for keeping any mutable\n     * value around similar to how you\u2019d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It\u2019s handy for keeping any mutable\n     * value around similar to how you\u2019d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    function useRef<T>(initialValue: T|null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It\u2019s handy for keeping any mutable\n     * value around similar to how you\u2019d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you\u2019re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useeffect\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecallback\n     */\n    // TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>\n    function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usememo\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don\u2019t recommend adding debug values to every custom hook.\n     * It\u2019s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: 'mouse' | 'pen' | 'touch';\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {\n        relatedTarget: (EventTarget & RelatedTarget) | null;\n        target: EventTarget & Target;\n    }\n\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        code: string;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated. This was used to allow clients to pass `ref` and `key`\n     * to `createElement`, which is no longer necessary due to intersection\n     * types. If you need to declare a props object before passing it to\n     * `createElement` or a factory, use `ClassAttributes<T>`:\n     *\n     * ```ts\n     * var b: Button | null;\n     * var props: ButtonProps & ClassAttributes<Button> = {\n     *     ref: b => button = b, // ok!\n     *     label: \"I'm a Button\"\n     * };\n     * ```\n     */\n    interface Props<T> {\n        children?: ReactNode | undefined;\n        key?: Key | undefined;\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface DOMAttributes<T> {\n        children?: ReactNode | undefined;\n        dangerouslySetInnerHTML?: {\n            __html: string;\n        } | undefined;\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T> | undefined;\n        onCopyCapture?: ClipboardEventHandler<T> | undefined;\n        onCut?: ClipboardEventHandler<T> | undefined;\n        onCutCapture?: ClipboardEventHandler<T> | undefined;\n        onPaste?: ClipboardEventHandler<T> | undefined;\n        onPasteCapture?: ClipboardEventHandler<T> | undefined;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T> | undefined;\n        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionStart?: CompositionEventHandler<T> | undefined;\n        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdate?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T> | undefined;\n        onFocusCapture?: FocusEventHandler<T> | undefined;\n        onBlur?: FocusEventHandler<T> | undefined;\n        onBlurCapture?: FocusEventHandler<T> | undefined;\n\n        // Form Events\n        onChange?: FormEventHandler<T> | undefined;\n        onChangeCapture?: FormEventHandler<T> | undefined;\n        onBeforeInput?: FormEventHandler<T> | undefined;\n        onBeforeInputCapture?: FormEventHandler<T> | undefined;\n        onInput?: FormEventHandler<T> | undefined;\n        onInputCapture?: FormEventHandler<T> | undefined;\n        onReset?: FormEventHandler<T> | undefined;\n        onResetCapture?: FormEventHandler<T> | undefined;\n        onSubmit?: FormEventHandler<T> | undefined;\n        onSubmitCapture?: FormEventHandler<T> | undefined;\n        onInvalid?: FormEventHandler<T> | undefined;\n        onInvalidCapture?: FormEventHandler<T> | undefined;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T> | undefined;\n        onLoadCapture?: ReactEventHandler<T> | undefined;\n        onError?: ReactEventHandler<T> | undefined; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T> | undefined;\n        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPress?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;\n        onKeyUp?: KeyboardEventHandler<T> | undefined;\n        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T> | undefined;\n        onAbortCapture?: ReactEventHandler<T> | undefined;\n        onCanPlay?: ReactEventHandler<T> | undefined;\n        onCanPlayCapture?: ReactEventHandler<T> | undefined;\n        onCanPlayThrough?: ReactEventHandler<T> | undefined;\n        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;\n        onDurationChange?: ReactEventHandler<T> | undefined;\n        onDurationChangeCapture?: ReactEventHandler<T> | undefined;\n        onEmptied?: ReactEventHandler<T> | undefined;\n        onEmptiedCapture?: ReactEventHandler<T> | undefined;\n        onEncrypted?: ReactEventHandler<T> | undefined;\n        onEncryptedCapture?: ReactEventHandler<T> | undefined;\n        onEnded?: ReactEventHandler<T> | undefined;\n        onEndedCapture?: ReactEventHandler<T> | undefined;\n        onLoadedData?: ReactEventHandler<T> | undefined;\n        onLoadedDataCapture?: ReactEventHandler<T> | undefined;\n        onLoadedMetadata?: ReactEventHandler<T> | undefined;\n        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;\n        onLoadStart?: ReactEventHandler<T> | undefined;\n        onLoadStartCapture?: ReactEventHandler<T> | undefined;\n        onPause?: ReactEventHandler<T> | undefined;\n        onPauseCapture?: ReactEventHandler<T> | undefined;\n        onPlay?: ReactEventHandler<T> | undefined;\n        onPlayCapture?: ReactEventHandler<T> | undefined;\n        onPlaying?: ReactEventHandler<T> | undefined;\n        onPlayingCapture?: ReactEventHandler<T> | undefined;\n        onProgress?: ReactEventHandler<T> | undefined;\n        onProgressCapture?: ReactEventHandler<T> | undefined;\n        onRateChange?: ReactEventHandler<T> | undefined;\n        onRateChangeCapture?: ReactEventHandler<T> | undefined;\n        onSeeked?: ReactEventHandler<T> | undefined;\n        onSeekedCapture?: ReactEventHandler<T> | undefined;\n        onSeeking?: ReactEventHandler<T> | undefined;\n        onSeekingCapture?: ReactEventHandler<T> | undefined;\n        onStalled?: ReactEventHandler<T> | undefined;\n        onStalledCapture?: ReactEventHandler<T> | undefined;\n        onSuspend?: ReactEventHandler<T> | undefined;\n        onSuspendCapture?: ReactEventHandler<T> | undefined;\n        onTimeUpdate?: ReactEventHandler<T> | undefined;\n        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;\n        onVolumeChange?: ReactEventHandler<T> | undefined;\n        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;\n        onWaiting?: ReactEventHandler<T> | undefined;\n        onWaitingCapture?: ReactEventHandler<T> | undefined;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T> | undefined;\n        onAuxClickCapture?: MouseEventHandler<T> | undefined;\n        onClick?: MouseEventHandler<T> | undefined;\n        onClickCapture?: MouseEventHandler<T> | undefined;\n        onContextMenu?: MouseEventHandler<T> | undefined;\n        onContextMenuCapture?: MouseEventHandler<T> | undefined;\n        onDoubleClick?: MouseEventHandler<T> | undefined;\n        onDoubleClickCapture?: MouseEventHandler<T> | undefined;\n        onDrag?: DragEventHandler<T> | undefined;\n        onDragCapture?: DragEventHandler<T> | undefined;\n        onDragEnd?: DragEventHandler<T> | undefined;\n        onDragEndCapture?: DragEventHandler<T> | undefined;\n        onDragEnter?: DragEventHandler<T> | undefined;\n        onDragEnterCapture?: DragEventHandler<T> | undefined;\n        onDragExit?: DragEventHandler<T> | undefined;\n        onDragExitCapture?: DragEventHandler<T> | undefined;\n        onDragLeave?: DragEventHandler<T> | undefined;\n        onDragLeaveCapture?: DragEventHandler<T> | undefined;\n        onDragOver?: DragEventHandler<T> | undefined;\n        onDragOverCapture?: DragEventHandler<T> | undefined;\n        onDragStart?: DragEventHandler<T> | undefined;\n        onDragStartCapture?: DragEventHandler<T> | undefined;\n        onDrop?: DragEventHandler<T> | undefined;\n        onDropCapture?: DragEventHandler<T> | undefined;\n        onMouseDown?: MouseEventHandler<T> | undefined;\n        onMouseDownCapture?: MouseEventHandler<T> | undefined;\n        onMouseEnter?: MouseEventHandler<T> | undefined;\n        onMouseLeave?: MouseEventHandler<T> | undefined;\n        onMouseMove?: MouseEventHandler<T> | undefined;\n        onMouseMoveCapture?: MouseEventHandler<T> | undefined;\n        onMouseOut?: MouseEventHandler<T> | undefined;\n        onMouseOutCapture?: MouseEventHandler<T> | undefined;\n        onMouseOver?: MouseEventHandler<T> | undefined;\n        onMouseOverCapture?: MouseEventHandler<T> | undefined;\n        onMouseUp?: MouseEventHandler<T> | undefined;\n        onMouseUpCapture?: MouseEventHandler<T> | undefined;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T> | undefined;\n        onSelectCapture?: ReactEventHandler<T> | undefined;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T> | undefined;\n        onTouchCancelCapture?: TouchEventHandler<T> | undefined;\n        onTouchEnd?: TouchEventHandler<T> | undefined;\n        onTouchEndCapture?: TouchEventHandler<T> | undefined;\n        onTouchMove?: TouchEventHandler<T> | undefined;\n        onTouchMoveCapture?: TouchEventHandler<T> | undefined;\n        onTouchStart?: TouchEventHandler<T> | undefined;\n        onTouchStartCapture?: TouchEventHandler<T> | undefined;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T> | undefined;\n        onPointerDownCapture?: PointerEventHandler<T> | undefined;\n        onPointerMove?: PointerEventHandler<T> | undefined;\n        onPointerMoveCapture?: PointerEventHandler<T> | undefined;\n        onPointerUp?: PointerEventHandler<T> | undefined;\n        onPointerUpCapture?: PointerEventHandler<T> | undefined;\n        onPointerCancel?: PointerEventHandler<T> | undefined;\n        onPointerCancelCapture?: PointerEventHandler<T> | undefined;\n        onPointerEnter?: PointerEventHandler<T> | undefined;\n        onPointerEnterCapture?: PointerEventHandler<T> | undefined;\n        onPointerLeave?: PointerEventHandler<T> | undefined;\n        onPointerLeaveCapture?: PointerEventHandler<T> | undefined;\n        onPointerOver?: PointerEventHandler<T> | undefined;\n        onPointerOverCapture?: PointerEventHandler<T> | undefined;\n        onPointerOut?: PointerEventHandler<T> | undefined;\n        onPointerOutCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n\n        // UI Events\n        onScroll?: UIEventHandler<T> | undefined;\n        onScrollCapture?: UIEventHandler<T> | undefined;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T> | undefined;\n        onWheelCapture?: WheelEventHandler<T> | undefined;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T> | undefined;\n        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationEnd?: AnimationEventHandler<T> | undefined;\n        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationIteration?: AnimationEventHandler<T> | undefined;\n        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T> | undefined;\n        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        'aria-activedescendant'?: string | undefined;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        'aria-atomic'?: Booleanish | undefined;\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both' | undefined;\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        'aria-busy'?: Booleanish | undefined;\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        'aria-checked'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        'aria-colcount'?: number | undefined;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        'aria-colindex'?: number | undefined;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        'aria-colspan'?: number | undefined;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        'aria-controls'?: string | undefined;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time' | undefined;\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        'aria-describedby'?: string | undefined;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        'aria-details'?: string | undefined;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        'aria-disabled'?: Booleanish | undefined;\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup' | undefined;\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        'aria-errormessage'?: string | undefined;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        'aria-expanded'?: Booleanish | undefined;\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        'aria-flowto'?: string | undefined;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-grabbed'?: Booleanish | undefined;\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog' | undefined;\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        'aria-hidden'?: Booleanish | undefined;\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling' | undefined;\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        'aria-keyshortcuts'?: string | undefined;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        'aria-label'?: string | undefined;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        'aria-labelledby'?: string | undefined;\n        /** Defines the hierarchical level of an element within a structure. */\n        'aria-level'?: number | undefined;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        'aria-live'?: 'off' | 'assertive' | 'polite' | undefined;\n        /** Indicates whether an element is modal when displayed. */\n        'aria-modal'?: Booleanish | undefined;\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        'aria-multiline'?: Booleanish | undefined;\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        'aria-multiselectable'?: Booleanish | undefined;\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        'aria-orientation'?: 'horizontal' | 'vertical' | undefined;\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        'aria-owns'?: string | undefined;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        'aria-placeholder'?: string | undefined;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        'aria-posinset'?: number | undefined;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        'aria-pressed'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        'aria-readonly'?: Booleanish | undefined;\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals' | undefined;\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        'aria-required'?: Booleanish | undefined;\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        'aria-roledescription'?: string | undefined;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        'aria-rowcount'?: number | undefined;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        'aria-rowindex'?: number | undefined;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        'aria-rowspan'?: number | undefined;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        'aria-selected'?: Booleanish | undefined;\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        'aria-setsize'?: number | undefined;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other' | undefined;\n        /** Defines the maximum allowed value for a range widget. */\n        'aria-valuemax'?: number | undefined;\n        /** Defines the minimum allowed value for a range widget. */\n        'aria-valuemin'?: number | undefined;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        'aria-valuenow'?: number | undefined;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        'aria-valuetext'?: string | undefined;\n    }\n\n    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions\n    type AriaRole =\n        | 'alert'\n        | 'alertdialog'\n        | 'application'\n        | 'article'\n        | 'banner'\n        | 'button'\n        | 'cell'\n        | 'checkbox'\n        | 'columnheader'\n        | 'combobox'\n        | 'complementary'\n        | 'contentinfo'\n        | 'definition'\n        | 'dialog'\n        | 'directory'\n        | 'document'\n        | 'feed'\n        | 'figure'\n        | 'form'\n        | 'grid'\n        | 'gridcell'\n        | 'group'\n        | 'heading'\n        | 'img'\n        | 'link'\n        | 'list'\n        | 'listbox'\n        | 'listitem'\n        | 'log'\n        | 'main'\n        | 'marquee'\n        | 'math'\n        | 'menu'\n        | 'menubar'\n        | 'menuitem'\n        | 'menuitemcheckbox'\n        | 'menuitemradio'\n        | 'navigation'\n        | 'none'\n        | 'note'\n        | 'option'\n        | 'presentation'\n        | 'progressbar'\n        | 'radio'\n        | 'radiogroup'\n        | 'region'\n        | 'row'\n        | 'rowgroup'\n        | 'rowheader'\n        | 'scrollbar'\n        | 'search'\n        | 'searchbox'\n        | 'separator'\n        | 'slider'\n        | 'spinbutton'\n        | 'status'\n        | 'switch'\n        | 'tab'\n        | 'table'\n        | 'tablist'\n        | 'tabpanel'\n        | 'term'\n        | 'textbox'\n        | 'timer'\n        | 'toolbar'\n        | 'tooltip'\n        | 'tree'\n        | 'treegrid'\n        | 'treeitem'\n        | (string & {});\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean | undefined;\n        defaultValue?: string | number | ReadonlyArray<string> | undefined;\n        suppressContentEditableWarning?: boolean | undefined;\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Standard HTML Attributes\n        accessKey?: string | undefined;\n        className?: string | undefined;\n        contentEditable?: Booleanish | \"inherit\" | undefined;\n        contextMenu?: string | undefined;\n        dir?: string | undefined;\n        draggable?: Booleanish | undefined;\n        hidden?: boolean | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        placeholder?: string | undefined;\n        slot?: string | undefined;\n        spellCheck?: Booleanish | undefined;\n        style?: CSSProperties | undefined;\n        tabIndex?: number | undefined;\n        title?: string | undefined;\n        translate?: 'yes' | 'no' | undefined;\n\n        // Unknown\n        radioGroup?: string | undefined; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: AriaRole | undefined;\n\n        // RDFa Attributes\n        about?: string | undefined;\n        datatype?: string | undefined;\n        inlist?: any;\n        prefix?: string | undefined;\n        property?: string | undefined;\n        resource?: string | undefined;\n        typeof?: string | undefined;\n        vocab?: string | undefined;\n\n        // Non-standard Attributes\n        autoCapitalize?: string | undefined;\n        autoCorrect?: string | undefined;\n        autoSave?: string | undefined;\n        color?: string | undefined;\n        itemProp?: string | undefined;\n        itemScope?: boolean | undefined;\n        itemType?: string | undefined;\n        itemID?: string | undefined;\n        itemRef?: string | undefined;\n        results?: number | undefined;\n        security?: string | undefined;\n        unselectable?: 'on' | 'off' | undefined;\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n         */\n        inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search' | undefined;\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n         */\n        is?: string | undefined;\n    }\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string | undefined;\n        acceptCharset?: string | undefined;\n        action?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        alt?: string | undefined;\n        as?: string | undefined;\n        async?: boolean | undefined;\n        autoComplete?: string | undefined;\n        autoFocus?: boolean | undefined;\n        autoPlay?: boolean | undefined;\n        capture?: boolean | 'user' | 'environment' | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        charSet?: string | undefined;\n        challenge?: string | undefined;\n        checked?: boolean | undefined;\n        cite?: string | undefined;\n        classID?: string | undefined;\n        cols?: number | undefined;\n        colSpan?: number | undefined;\n        content?: string | undefined;\n        controls?: boolean | undefined;\n        coords?: string | undefined;\n        crossOrigin?: string | undefined;\n        data?: string | undefined;\n        dateTime?: string | undefined;\n        default?: boolean | undefined;\n        defer?: boolean | undefined;\n        disabled?: boolean | undefined;\n        download?: any;\n        encType?: string | undefined;\n        form?: string | undefined;\n        formAction?: string | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        frameBorder?: number | string | undefined;\n        headers?: string | undefined;\n        height?: number | string | undefined;\n        high?: number | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        htmlFor?: string | undefined;\n        httpEquiv?: string | undefined;\n        integrity?: string | undefined;\n        keyParams?: string | undefined;\n        keyType?: string | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        list?: string | undefined;\n        loop?: boolean | undefined;\n        low?: number | undefined;\n        manifest?: string | undefined;\n        marginHeight?: number | undefined;\n        marginWidth?: number | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        media?: string | undefined;\n        mediaGroup?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        muted?: boolean | undefined;\n        name?: string | undefined;\n        nonce?: string | undefined;\n        noValidate?: boolean | undefined;\n        open?: boolean | undefined;\n        optimum?: number | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        preload?: string | undefined;\n        readOnly?: boolean | undefined;\n        rel?: string | undefined;\n        required?: boolean | undefined;\n        reversed?: boolean | undefined;\n        rows?: number | undefined;\n        rowSpan?: number | undefined;\n        sandbox?: string | undefined;\n        scope?: string | undefined;\n        scoped?: boolean | undefined;\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        selected?: boolean | undefined;\n        shape?: string | undefined;\n        size?: number | undefined;\n        sizes?: string | undefined;\n        span?: number | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        srcLang?: string | undefined;\n        srcSet?: string | undefined;\n        start?: number | undefined;\n        step?: number | string | undefined;\n        summary?: string | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n        wrap?: string | undefined;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | ''\n        | 'no-referrer'\n        | 'no-referrer-when-downgrade'\n        | 'origin'\n        | 'origin-when-cross-origin'\n        | 'same-origin'\n        | 'strict-origin'\n        | 'strict-origin-when-cross-origin'\n        | 'unsafe-url';\n\n    type HTMLAttributeAnchorTarget =\n        | '_self'\n        | '_blank'\n        | '_parent'\n        | '_top'\n        | (string & {});\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        ping?: string | undefined;\n        rel?: string | undefined;\n        target?: HTMLAttributeAnchorTarget | undefined;\n        type?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n    }\n\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        coords?: string | undefined;\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        rel?: string | undefined;\n        shape?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        formAction?: string | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        name?: string | undefined;\n        type?: 'submit' | 'reset' | 'button' | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean | undefined;\n        onToggle?: ReactEventHandler<T> | undefined;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        onCancel?: ReactEventHandler<T> |  undefined;\n        onClose?: ReactEventHandler<T> |  undefined;\n        open?: boolean | undefined;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string | undefined;\n        action?: string | undefined;\n        autoComplete?: string | undefined;\n        encType?: string | undefined;\n        method?: string | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        target?: string | undefined;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string | undefined;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        /** @deprecated */\n        frameBorder?: number | string | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        /** @deprecated */\n        marginHeight?: number | undefined;\n        /** @deprecated */\n        marginWidth?: number | undefined;\n        name?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sandbox?: string | undefined;\n        /** @deprecated */\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        decoding?: \"async\" | \"auto\" | \"sync\" | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    type HTMLInputTypeAttribute =\n        | 'button'\n        | 'checkbox'\n        | 'color'\n        | 'date'\n        | 'datetime-local'\n        | 'email'\n        | 'file'\n        | 'hidden'\n        | 'image'\n        | 'month'\n        | 'number'\n        | 'password'\n        | 'radio'\n        | 'range'\n        | 'reset'\n        | 'search'\n        | 'submit'\n        | 'tel'\n        | 'text'\n        | 'time'\n        | 'url'\n        | 'week'\n        | (string & {});\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string | undefined;\n        alt?: string | undefined;\n        autoComplete?: string | undefined;\n        autoFocus?: boolean | undefined;\n        capture?: boolean | 'user' | 'environment' | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean | undefined;\n        crossOrigin?: string | undefined;\n        disabled?: boolean | undefined;\n        enterKeyHint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined;\n        form?: string | undefined;\n        formAction?: string | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        height?: number | string | undefined;\n        list?: string | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        src?: string | undefined;\n        step?: number | string | undefined;\n        type?: HTMLInputTypeAttribute | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        width?: number | string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean | undefined;\n        challenge?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        keyType?: string | undefined;\n        keyParams?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string | undefined;\n        crossOrigin?: string | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        integrity?: string | undefined;\n        media?: string | undefined;\n        imageSrcSet?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        rel?: string | undefined;\n        sizes?: string | undefined;\n        type?: string | undefined;\n        charSet?: string | undefined;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string | undefined;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean | undefined;\n        controls?: boolean | undefined;\n        controlsList?: string | undefined;\n        crossOrigin?: string | undefined;\n        loop?: boolean | undefined;\n        mediaGroup?: string | undefined;\n        muted?: boolean | undefined;\n        playsInline?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string | undefined;\n        content?: string | undefined;\n        httpEquiv?: string | undefined;\n        name?: string | undefined;\n        media?: string | undefined;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        high?: number | undefined;\n        low?: number | undefined;\n        max?: number | string | undefined;\n        min?: number | string | undefined;\n        optimum?: number | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string | undefined;\n        data?: string | undefined;\n        form?: string | undefined;\n        height?: number | string | undefined;\n        name?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean | undefined;\n        start?: number | undefined;\n        type?: '1' | 'a' | 'A' | 'i' | 'I' | undefined;\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n        selected?: boolean | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean | undefined;\n        /** @deprecated */\n        charSet?: string | undefined;\n        crossOrigin?: string | undefined;\n        defer?: boolean | undefined;\n        integrity?: string | undefined;\n        noModule?: boolean | undefined;\n        nonce?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        autoFocus?: boolean | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        media?: string | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string | undefined;\n        nonce?: string | undefined;\n        scoped?: boolean | undefined;\n        type?: string | undefined;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        summary?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        autoFocus?: boolean | undefined;\n        cols?: number | undefined;\n        dirName?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        name?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        rows?: number | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        wrap?: string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | undefined;\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string | undefined;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        src?: string | undefined;\n        srcLang?: string | undefined;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        width?: number | string | undefined;\n        disablePictureInPicture?: boolean | undefined;\n        disableRemotePlayback?: boolean | undefined;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string | undefined;\n        color?: string | undefined;\n        height?: number | string | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        max?: number | string | undefined;\n        media?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        name?: string | undefined;\n        style?: CSSProperties | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: AriaRole | undefined;\n        tabIndex?: number | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n\n        // SVG Specific attributes\n        accentHeight?: number | string | undefined;\n        accumulate?: \"none\" | \"sum\" | undefined;\n        additive?: \"replace\" | \"sum\" | undefined;\n        alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n        \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\" | undefined;\n        allowReorder?: \"no\" | \"yes\" | undefined;\n        alphabetic?: number | string | undefined;\n        amplitude?: number | string | undefined;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined;\n        ascent?: number | string | undefined;\n        attributeName?: string | undefined;\n        attributeType?: string | undefined;\n        autoReverse?: Booleanish | undefined;\n        azimuth?: number | string | undefined;\n        baseFrequency?: number | string | undefined;\n        baselineShift?: number | string | undefined;\n        baseProfile?: number | string | undefined;\n        bbox?: number | string | undefined;\n        begin?: number | string | undefined;\n        bias?: number | string | undefined;\n        by?: number | string | undefined;\n        calcMode?: number | string | undefined;\n        capHeight?: number | string | undefined;\n        clip?: number | string | undefined;\n        clipPath?: string | undefined;\n        clipPathUnits?: number | string | undefined;\n        clipRule?: number | string | undefined;\n        colorInterpolation?: number | string | undefined;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\" | undefined;\n        colorProfile?: number | string | undefined;\n        colorRendering?: number | string | undefined;\n        contentScriptType?: number | string | undefined;\n        contentStyleType?: number | string | undefined;\n        cursor?: number | string | undefined;\n        cx?: number | string | undefined;\n        cy?: number | string | undefined;\n        d?: string | undefined;\n        decelerate?: number | string | undefined;\n        descent?: number | string | undefined;\n        diffuseConstant?: number | string | undefined;\n        direction?: number | string | undefined;\n        display?: number | string | undefined;\n        divisor?: number | string | undefined;\n        dominantBaseline?: number | string | undefined;\n        dur?: number | string | undefined;\n        dx?: number | string | undefined;\n        dy?: number | string | undefined;\n        edgeMode?: number | string | undefined;\n        elevation?: number | string | undefined;\n        enableBackground?: number | string | undefined;\n        end?: number | string | undefined;\n        exponent?: number | string | undefined;\n        externalResourcesRequired?: Booleanish | undefined;\n        fill?: string | undefined;\n        fillOpacity?: number | string | undefined;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\" | undefined;\n        filter?: string | undefined;\n        filterRes?: number | string | undefined;\n        filterUnits?: number | string | undefined;\n        floodColor?: number | string | undefined;\n        floodOpacity?: number | string | undefined;\n        focusable?: Booleanish | \"auto\" | undefined;\n        fontFamily?: string | undefined;\n        fontSize?: number | string | undefined;\n        fontSizeAdjust?: number | string | undefined;\n        fontStretch?: number | string | undefined;\n        fontStyle?: number | string | undefined;\n        fontVariant?: number | string | undefined;\n        fontWeight?: number | string | undefined;\n        format?: number | string | undefined;\n        fr?: number | string | undefined;\n        from?: number | string | undefined;\n        fx?: number | string | undefined;\n        fy?: number | string | undefined;\n        g1?: number | string | undefined;\n        g2?: number | string | undefined;\n        glyphName?: number | string | undefined;\n        glyphOrientationHorizontal?: number | string | undefined;\n        glyphOrientationVertical?: number | string | undefined;\n        glyphRef?: number | string | undefined;\n        gradientTransform?: string | undefined;\n        gradientUnits?: string | undefined;\n        hanging?: number | string | undefined;\n        horizAdvX?: number | string | undefined;\n        horizOriginX?: number | string | undefined;\n        href?: string | undefined;\n        ideographic?: number | string | undefined;\n        imageRendering?: number | string | undefined;\n        in2?: number | string | undefined;\n        in?: string | undefined;\n        intercept?: number | string | undefined;\n        k1?: number | string | undefined;\n        k2?: number | string | undefined;\n        k3?: number | string | undefined;\n        k4?: number | string | undefined;\n        k?: number | string | undefined;\n        kernelMatrix?: number | string | undefined;\n        kernelUnitLength?: number | string | undefined;\n        kerning?: number | string | undefined;\n        keyPoints?: number | string | undefined;\n        keySplines?: number | string | undefined;\n        keyTimes?: number | string | undefined;\n        lengthAdjust?: number | string | undefined;\n        letterSpacing?: number | string | undefined;\n        lightingColor?: number | string | undefined;\n        limitingConeAngle?: number | string | undefined;\n        local?: number | string | undefined;\n        markerEnd?: string | undefined;\n        markerHeight?: number | string | undefined;\n        markerMid?: string | undefined;\n        markerStart?: string | undefined;\n        markerUnits?: number | string | undefined;\n        markerWidth?: number | string | undefined;\n        mask?: string | undefined;\n        maskContentUnits?: number | string | undefined;\n        maskUnits?: number | string | undefined;\n        mathematical?: number | string | undefined;\n        mode?: number | string | undefined;\n        numOctaves?: number | string | undefined;\n        offset?: number | string | undefined;\n        opacity?: number | string | undefined;\n        operator?: number | string | undefined;\n        order?: number | string | undefined;\n        orient?: number | string | undefined;\n        orientation?: number | string | undefined;\n        origin?: number | string | undefined;\n        overflow?: number | string | undefined;\n        overlinePosition?: number | string | undefined;\n        overlineThickness?: number | string | undefined;\n        paintOrder?: number | string | undefined;\n        panose1?: number | string | undefined;\n        path?: string | undefined;\n        pathLength?: number | string | undefined;\n        patternContentUnits?: string | undefined;\n        patternTransform?: number | string | undefined;\n        patternUnits?: string | undefined;\n        pointerEvents?: number | string | undefined;\n        points?: string | undefined;\n        pointsAtX?: number | string | undefined;\n        pointsAtY?: number | string | undefined;\n        pointsAtZ?: number | string | undefined;\n        preserveAlpha?: Booleanish | undefined;\n        preserveAspectRatio?: string | undefined;\n        primitiveUnits?: number | string | undefined;\n        r?: number | string | undefined;\n        radius?: number | string | undefined;\n        refX?: number | string | undefined;\n        refY?: number | string | undefined;\n        renderingIntent?: number | string | undefined;\n        repeatCount?: number | string | undefined;\n        repeatDur?: number | string | undefined;\n        requiredExtensions?: number | string | undefined;\n        requiredFeatures?: number | string | undefined;\n        restart?: number | string | undefined;\n        result?: string | undefined;\n        rotate?: number | string | undefined;\n        rx?: number | string | undefined;\n        ry?: number | string | undefined;\n        scale?: number | string | undefined;\n        seed?: number | string | undefined;\n        shapeRendering?: number | string | undefined;\n        slope?: number | string | undefined;\n        spacing?: number | string | undefined;\n        specularConstant?: number | string | undefined;\n        specularExponent?: number | string | undefined;\n        speed?: number | string | undefined;\n        spreadMethod?: string | undefined;\n        startOffset?: number | string | undefined;\n        stdDeviation?: number | string | undefined;\n        stemh?: number | string | undefined;\n        stemv?: number | string | undefined;\n        stitchTiles?: number | string | undefined;\n        stopColor?: string | undefined;\n        stopOpacity?: number | string | undefined;\n        strikethroughPosition?: number | string | undefined;\n        strikethroughThickness?: number | string | undefined;\n        string?: number | string | undefined;\n        stroke?: string | undefined;\n        strokeDasharray?: string | number | undefined;\n        strokeDashoffset?: string | number | undefined;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\" | undefined;\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\" | undefined;\n        strokeMiterlimit?: number | string | undefined;\n        strokeOpacity?: number | string | undefined;\n        strokeWidth?: number | string | undefined;\n        surfaceScale?: number | string | undefined;\n        systemLanguage?: number | string | undefined;\n        tableValues?: number | string | undefined;\n        targetX?: number | string | undefined;\n        targetY?: number | string | undefined;\n        textAnchor?: string | undefined;\n        textDecoration?: number | string | undefined;\n        textLength?: number | string | undefined;\n        textRendering?: number | string | undefined;\n        to?: number | string | undefined;\n        transform?: string | undefined;\n        u1?: number | string | undefined;\n        u2?: number | string | undefined;\n        underlinePosition?: number | string | undefined;\n        underlineThickness?: number | string | undefined;\n        unicode?: number | string | undefined;\n        unicodeBidi?: number | string | undefined;\n        unicodeRange?: number | string | undefined;\n        unitsPerEm?: number | string | undefined;\n        vAlphabetic?: number | string | undefined;\n        values?: string | undefined;\n        vectorEffect?: number | string | undefined;\n        version?: string | undefined;\n        vertAdvY?: number | string | undefined;\n        vertOriginX?: number | string | undefined;\n        vertOriginY?: number | string | undefined;\n        vHanging?: number | string | undefined;\n        vIdeographic?: number | string | undefined;\n        viewBox?: string | undefined;\n        viewTarget?: number | string | undefined;\n        visibility?: number | string | undefined;\n        vMathematical?: number | string | undefined;\n        widths?: number | string | undefined;\n        wordSpacing?: number | string | undefined;\n        writingMode?: number | string | undefined;\n        x1?: number | string | undefined;\n        x2?: number | string | undefined;\n        x?: number | string | undefined;\n        xChannelSelector?: string | undefined;\n        xHeight?: number | string | undefined;\n        xlinkActuate?: string | undefined;\n        xlinkArcrole?: string | undefined;\n        xlinkHref?: string | undefined;\n        xlinkRole?: string | undefined;\n        xlinkShow?: string | undefined;\n        xlinkTitle?: string | undefined;\n        xlinkType?: string | undefined;\n        xmlBase?: string | undefined;\n        xmlLang?: string | undefined;\n        xmlns?: string | undefined;\n        xmlnsXlink?: string | undefined;\n        xmlSpace?: string | undefined;\n        y1?: number | string | undefined;\n        y2?: number | string | undefined;\n        y?: number | string | undefined;\n        yChannelSelector?: string | undefined;\n        z?: number | string | undefined;\n        zoomAndPan?: string | undefined;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean | undefined;\n        allowpopups?: boolean | undefined;\n        autoFocus?: boolean | undefined;\n        autosize?: boolean | undefined;\n        blinkfeatures?: string | undefined;\n        disableblinkfeatures?: string | undefined;\n        disableguestresize?: boolean | undefined;\n        disablewebsecurity?: boolean | undefined;\n        guestinstance?: string | undefined;\n        httpreferrer?: string | undefined;\n        nodeintegration?: boolean | undefined;\n        partition?: string | undefined;\n        plugins?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n        useragent?: string | undefined;\n        webpreferences?: string | undefined;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG { }\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : undefined extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    interface ReactChildren {\n        map<T, C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack: string;\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T :\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n            string extends keyof P ? P :\n                // Prefer declared types which are not exactly any\n                & Pick<P, NotExactlyAnyPropertyKeys<P>>\n                // For props which are exactly any, use the type inferred from propTypes if present\n                & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n                // Keep leftover props not specified in propTypes\n                & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & Partial<Pick<P, Extract<keyof P, keyof D>>>\n        & Partial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T; }\n        ? MergePropTypes<P, PropTypes.InferProps<T>>\n        : C extends { defaultProps: infer D; }\n            ? Defaultize<P, D>\n            : P;\n\ndeclare global {\n    namespace JSX {\n        interface Element extends React.ReactElement<any, any> { }\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty { props: {}; }\n        interface ElementChildrenAttribute { children: {}; }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n                : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends React.Attributes { }\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGProps<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGProps<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n"},52031:e=>{e.exports="import { NetworkError as NetworkError$1, Dispatch as Dispatch$1, State as State$1, Controller, ActionTypes, CacheProvider as CacheProvider$1, Manager, Middleware as Middleware$1, SubscribeAction, UnsubscribeAction, Schema as Schema$1, __INTERNAL__, initialState, StateContext, DispatchContext, hasUsableData } from '@rest-hooks/core';\nexport { AbstractInstanceType, ActionTypes, DeleteShape, Dispatch, FetchAction, FetchShape, InvalidateAction, Manager, Middleware, MiddlewareAPI, MutateShape, PK, ParamsFromShape, ReadShape, ReceiveAction, ReceiveTypes, ResetAction, SetShapeParams, State, SubscribeAction, UnsubscribeAction, UpdateFunction, useCache, useController, useDLE, useDenormalized, useError, useFetch, useFetcher, useInvalidator, useMeta, usePromisifiedDispatch, useResetter, useResource, useRetrieve, useSubscription, useSuspense } from '@rest-hooks/core';\nimport React from 'react';\n\ndeclare type AbstractInstanceType<T> = T extends {\n    prototype: infer U;\n} ? U : never;\ndeclare type DenormalizeObject<S extends Record<string, any>> = {\n    [K in keyof S]: S[K] extends Schema ? Denormalize<S[K]> : S[K];\n};\ndeclare type DenormalizeNullableObject<S extends Record<string, any>> = {\n    [K in keyof S]: S[K] extends Schema ? DenormalizeNullable<S[K]> : S[K];\n};\ndeclare type NormalizeObject<S extends Record<string, any>> = {\n    [K in keyof S]: S[K] extends Schema ? Normalize<S[K]> : S[K];\n};\ndeclare type NormalizedNullableObject<S extends Record<string, any>> = {\n    [K in keyof S]: S[K] extends Schema ? NormalizeNullable<S[K]> : S[K];\n};\ninterface NestedSchemaClass<T = any> {\n    schema: Record<string, Schema>;\n    prototype: T;\n}\ninterface RecordClass<T = any> extends NestedSchemaClass<T> {\n    fromJS: (...args: any) => AbstractInstanceType<T>;\n}\ndeclare type DenormalizeNullableNestedSchema<S extends NestedSchemaClass> = keyof S['schema'] extends never ? S['prototype'] : string extends keyof S['schema'] ? S['prototype'] : S['prototype'] & {\n    [K in keyof S['schema']]: DenormalizeNullable<S['schema'][K]>;\n};\ndeclare type DenormalizeReturnType<T> = T extends (input: any, unvisit: any) => [infer R, any, any] ? R : never;\ndeclare type NormalizeReturnType<T> = T extends (...args: any) => infer R ? R : never;\ndeclare type Denormalize<S> = S extends EntityInterface<infer U> ? U : S extends RecordClass ? AbstractInstanceType<S> : S extends SchemaClass ? DenormalizeReturnType<S['denormalize']> : S extends Serializable<infer T> ? T : S extends Array<infer F> ? Denormalize<F>[] : S extends {\n    [K: string]: any;\n} ? DenormalizeObject<S> : S;\ndeclare type DenormalizeNullable<S> = S extends EntityInterface<any> ? DenormalizeNullableNestedSchema<S> | undefined : S extends RecordClass ? DenormalizeNullableNestedSchema<S> : S extends SchemaClass ? DenormalizeReturnType<S['_denormalizeNullable']> : S extends Serializable<infer T> ? T : S extends Array<infer F> ? Denormalize<F>[] | undefined : S extends {\n    [K: string]: any;\n} ? DenormalizeNullableObject<S> : S;\ndeclare type Normalize<S> = S extends EntityInterface ? string : S extends RecordClass ? NormalizeObject<S['schema']> : S extends SchemaClass ? NormalizeReturnType<S['normalize']> : S extends Serializable<infer T> ? T : S extends Array<infer F> ? Normalize<F>[] : S extends {\n    [K: string]: any;\n} ? NormalizeObject<S> : S;\ndeclare type NormalizeNullable<S> = S extends EntityInterface ? string | undefined : S extends RecordClass ? NormalizedNullableObject<S['schema']> : S extends SchemaClass ? NormalizeReturnType<S['_normalizeNullable']> : S extends Serializable<infer T> ? T : S extends Array<infer F> ? Normalize<F>[] | undefined : S extends {\n    [K: string]: any;\n} ? NormalizedNullableObject<S> : S;\n\n/** Get the Params type for a given Shape */\ndeclare type EndpointParam<E> = E extends (first: infer A, ...rest: any) => any ? A : E extends {\n    key: (first: infer A, ...rest: any) => any;\n} ? A : never;\n/** What the function's promise resolves to */\ndeclare type ResolveType<E extends (...args: any) => any> = ReturnType<E> extends Promise<infer R> ? R : never;\ndeclare type PartialArray<A> = A extends [] ? [] : A extends [infer F] ? [F] | [] : A extends [infer F, ...infer Rest] ? [F] | [F, ...PartialArray<Rest>] : A extends (infer T)[] ? T[] : never;\n\ninterface NetworkError extends Error {\n    status: number;\n    response?: Response;\n}\ninterface UnknownError extends Error {\n    status?: unknown;\n    response?: unknown;\n}\ndeclare type ErrorTypes = NetworkError | UnknownError;\n\ninterface SnapshotInterface {\n    getResponse: <E extends Pick<EndpointInterface, 'key' | 'schema' | 'invalidIfStale'>, Args extends readonly [...Parameters<E['key']>]>(endpoint: E, ...args: Args) => {\n        data: DenormalizeNullable<E['schema']>;\n        expiryStatus: ExpiryStatusInterface;\n        expiresAt: number;\n    };\n    getError: <E extends Pick<EndpointInterface, 'key'>, Args extends readonly [...Parameters<E['key']>]>(endpoint: E, ...args: Args) => ErrorTypes | undefined;\n    readonly fetchedAt: number;\n}\ndeclare type ExpiryStatusInterface = 1 | 2 | 3;\n\ndeclare type FetchFunction<A extends readonly any[] = any, R = any> = (...args: A) => Promise<R>;\ninterface EndpointExtraOptions<F extends FetchFunction = FetchFunction> {\n    /** Default data expiry length, will fall back to NetworkManager default if not defined */\n    readonly dataExpiryLength?: number;\n    /** Default error expiry length, will fall back to NetworkManager default if not defined */\n    readonly errorExpiryLength?: number;\n    /** Poll with at least this frequency in miliseconds */\n    readonly pollFrequency?: number;\n    /** Marks cached resources as invalid if they are stale */\n    readonly invalidIfStale?: boolean;\n    /** Enables optimistic updates for this request - uses return value as assumed network response\n     * @deprecated use https://resthooks.io/docs/api/Endpoint#getoptimisticresponse instead\n     */\n    optimisticUpdate?(...args: Parameters<F>): ResolveType<F>;\n    /** Enables optimistic updates for this request - uses return value as assumed network response */\n    getOptimisticResponse?(snap: SnapshotInterface, ...args: Parameters<F>): ResolveType<F>;\n    /** Determines whether to throw or fallback to */\n    errorPolicy?(error: any): 'soft' | undefined;\n    /** User-land extra data to send */\n    readonly extra?: any;\n}\n\ndeclare type Schema = null | string | {\n    [K: string]: any;\n} | Schema[] | SchemaSimple | Serializable;\ndeclare type Serializable<T extends {\n    toJSON(): string;\n} = {\n    toJSON(): string;\n}> = {\n    prototype: T;\n};\ninterface SchemaSimple<T = any> {\n    normalize(input: any, parent: any, key: any, visit: (...args: any) => any, addEntity: (...args: any) => any, visitedEntities: Record<string, any>): any;\n    denormalize(input: {}, unvisit: UnvisitFunction): [denormalized: T, found: boolean, suspend: boolean];\n    infer(args: readonly any[], indexes: NormalizedIndex, recurse: (...args: any) => any): any;\n}\ninterface SchemaClass<T = any, N = T | undefined> extends SchemaSimple<T> {\n    _normalizeNullable(): any;\n    _denormalizeNullable(): [N, boolean, boolean];\n}\ninterface EntityInterface<T = any> extends SchemaSimple {\n    pk(params: any, parent?: any, key?: string): string | undefined;\n    readonly key: string;\n    merge(existing: any, incoming: any): any;\n    expiresAt?(meta: any, input: any): number;\n    useIncoming?(existingMeta: any, incomingMeta: any, existing: any, incoming: any): boolean;\n    indexes?: any;\n    schema: Record<string, Schema>;\n    prototype: T;\n}\ninterface UnvisitFunction {\n    (input: any, schema: any): [any, boolean, boolean];\n    og?: UnvisitFunction;\n    setLocal?: (entity: any) => void;\n}\ndeclare type NormalizedIndex = {\n    readonly [entityKey: string]: {\n        readonly [indexName: string]: {\n            readonly [lookup: string]: string;\n        };\n    };\n};\n/** Defines a networking endpoint */\ninterface EndpointInterface<F extends FetchFunction = FetchFunction, S extends Schema | undefined = Schema | undefined, M extends true | undefined = true | undefined> extends EndpointExtraOptions<F> {\n    (...args: Parameters<F>): ReturnType<F>;\n    key(...args: Parameters<F>): string;\n    readonly sideEffect?: M;\n    readonly schema?: S;\n}\n/** To change values on the server */\ninterface MutateEndpoint<F extends FetchFunction = FetchFunction, S extends Schema | undefined = Schema | undefined> extends EndpointInterface<F, S, true> {\n    sideEffect: true;\n}\n/** For retrieval requests */\ndeclare type ReadEndpoint<F extends FetchFunction = FetchFunction, S extends Schema | undefined = Schema | undefined> = EndpointInterface<F, S, undefined>;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n\ninterface EndpointOptions<\n  F extends FetchFunction = FetchFunction,\n  S extends Schema | undefined = undefined,\n  M extends true | undefined = undefined,\n> extends EndpointExtraOptions<F> {\n  key?: (...args: Parameters<F>) => string;\n  sideEffect?: M;\n  schema?: S;\n  [k: string]: any;\n}\n\ninterface EndpointExtendOptions<\n  F extends FetchFunction = FetchFunction,\n  S extends Schema | undefined = Schema | undefined,\n  M extends true | undefined = true | undefined,\n> extends EndpointOptions<F, S, M> {\n  fetch?: FetchFunction;\n}\n\ntype KeyofEndpointInstance = keyof EndpointInstance<FetchFunction>;\n\ntype ExtendedEndpoint<\n  O extends EndpointExtendOptions<F>,\n  E extends EndpointInstance<\n    FetchFunction,\n    Schema | undefined,\n    true | undefined\n  >,\n  F extends FetchFunction,\n> = EndpointInstance<\n  'fetch' extends keyof O ? Exclude<O['fetch'], undefined> : E['fetch'],\n  'schema' extends keyof O ? O['schema'] : E['schema'],\n  'sideEffect' extends keyof O ? O['sideEffect'] : E['sideEffect']\n> &\n  Omit<O, KeyofEndpointInstance> &\n  Omit<E, KeyofEndpointInstance>;\n\n/**\n * Defines an async data source.\n * @see https://resthooks.io/docs/api/Endpoint\n */\ninterface EndpointInstance<\n  F extends (...args: any) => Promise<any> = FetchFunction,\n  S extends Schema | undefined = Schema | undefined,\n  M extends true | undefined = true | undefined,\n> extends EndpointInstanceInterface<F, S, M> {\n  extend<\n    E extends EndpointInstance<\n      (...args: any) => Promise<any>,\n      Schema | undefined,\n      true | undefined\n    >,\n    O extends EndpointExtendOptions<F> &\n      Partial<Omit<E, keyof EndpointInstance<FetchFunction>>> &\n      Record<string, unknown>,\n  >(\n    this: E,\n    options: Readonly<O>,\n  ): ExtendedEndpoint<typeof options, E, F>;\n}\n\n/**\n * Defines an async data source.\n * @see https://resthooks.io/docs/api/Endpoint\n */\ninterface EndpointInstanceInterface<\n  F extends FetchFunction = FetchFunction,\n  S extends Schema | undefined = Schema | undefined,\n  M extends true | undefined = true | undefined,\n> extends EndpointInterface<F, S, M> {\n  constructor: EndpointConstructor;\n\n  /**\n   * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n   * @param thisArg The object to be used as the this object.\n   * @param argArray A set of arguments to be passed to the function.\n   */\n  apply<E extends FetchFunction>(\n    this: E,\n    thisArg: ThisParameterType<E>,\n    argArray?: Parameters<E>,\n  ): ReturnType<E>;\n\n  /**\n   * Calls a method of an object, substituting another object for the current object.\n   * @param thisArg The object to be used as the current object.\n   * @param argArray A list of arguments to be passed to the method.\n   */\n  call<E extends FetchFunction>(\n    this: E,\n    thisArg: ThisParameterType<E>,\n    ...argArray: Parameters<E>\n  ): ReturnType<E>;\n\n  /**\n   * For a given function, creates a bound function that has the same body as the original function.\n   * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n   * @param thisArg An object to which the this keyword can refer inside the new function.\n   * @param argArray A list of arguments to be passed to the new function.\n   */\n  bind<E extends FetchFunction, P extends PartialArray<Parameters<E>>>(\n    this: E,\n    thisArg: ThisParameterType<E>,\n    ...args: readonly [...P]\n  ): EndpointInstance<\n    (...args: readonly [...RemoveArray<Parameters<E>, P>]) => ReturnType<E>,\n    S,\n    M\n  > &\n    Omit<E, keyof EndpointInstance<FetchFunction>>;\n\n  /** Returns a string representation of a function. */\n  toString(): string;\n\n  prototype: any;\n  readonly length: number;\n\n  // Non-standard extensions\n  arguments: any;\n  caller: F;\n\n  key(...args: Parameters<F>): string;\n\n  readonly sideEffect: M;\n\n  readonly schema: S;\n\n  fetch: F;\n\n  /** The following is for compatibility with FetchShape */\n  /** @deprecated */\n  readonly type: M extends undefined\n    ? 'read'\n    : IfAny<M, any, IfTypeScriptLooseNull<'read', 'mutate'>>;\n\n  /** @deprecated */\n  getFetchKey(...args: OnlyFirst<Parameters<F>>): string;\n  /** @deprecated */\n  options?: EndpointExtraOptions<F>;\n}\n\ninterface EndpointConstructor {\n  new <\n    F extends (\n      this: EndpointInstance<FetchFunction> & E,\n      params?: any,\n      body?: any,\n    ) => Promise<any>,\n    S extends Schema | undefined = undefined,\n    M extends true | undefined = undefined,\n    E extends Record<string, any> = {},\n  >(\n    fetchFunction: F,\n    options?: EndpointOptions<F, S, M> & E,\n  ): EndpointInstance<F, S, M> & E;\n  readonly prototype: Function;\n}\ndeclare let Endpoint: EndpointConstructor;\n\n\ntype IfAny<T, Y, N> = 0 extends 1 & T ? Y : N;\ntype IfTypeScriptLooseNull<Y, N> = 1 | undefined extends 1 ? Y : N;\n\ntype OnlyFirst<A extends unknown[]> = A extends [] ? [] : [A[0]];\n\ntype RemoveArray<Orig extends any[], Rem extends any[]> = Rem extends [\n  any,\n  ...infer RestRem,\n]\n  ? Orig extends [any, ...infer RestOrig]\n    ? RemoveArray<RestOrig, RestRem>\n    : never\n  : Orig;\n\n/**\n * Performant lookups by secondary indexes\n * @see https://resthooks.io/docs/api/Index\n */\ndeclare class Index<S extends Schema, P = Readonly<IndexParams<S>>> {\n    schema: S;\n    constructor(schema: S, key?: (params: P) => string);\n    key(params?: P): string;\n    /** The following is for compatibility with FetchShape */\n    getFetchKey: (params: P) => string;\n}\ndeclare type ArrayElement<ArrayType extends unknown[] | readonly unknown[]> = ArrayType[number];\ndeclare type IndexParams<S extends Schema> = S extends {\n    indexes: readonly string[];\n} ? {\n    [K in Extract<ArrayElement<S['indexes']>, keyof AbstractInstanceType<S>>]?: AbstractInstanceType<S>[K];\n} : Readonly<object>;\n\ninterface Props$1<E extends NetworkError$1> {\n    children: React.ReactNode;\n    fallbackComponent: React.ComponentType<{\n        error: E;\n    }>;\n}\ninterface State<E extends NetworkError$1> {\n    error?: E;\n}\n/**\n * Handles any networking errors from useResource()\n * @see https://resthooks.io/docs/api/NetworkErrorBoundary\n */\ndeclare class NetworkErrorBoundary<E extends NetworkError$1> extends React.Component<Props$1<E>, State<E>> {\n    static defaultProps: {\n        fallbackComponent: ({ error }: {\n            error: NetworkError$1;\n        }) => JSX.Element;\n    };\n    static getDerivedStateFromError(error: NetworkError$1 | any): {\n        error: NetworkError$1;\n    };\n    state: State<E>;\n    render(): JSX.Element;\n}\n\ndeclare const PromiseifyMiddleware: <R extends React.Reducer<any, any>>(_: unknown) => (next: Dispatch$1<R>) => (action: React.ReducerAction<R>) => Promise<void>;\n//# sourceMappingURL=PromiseifyMiddleware.d.ts.map\n\ninterface Store<S> {\n    subscribe(listener: () => void): () => void;\n    dispatch: React.Dispatch<ActionTypes>;\n    getState(): S;\n}\ninterface Props<S> {\n    children: React.ReactNode;\n    store: Store<S>;\n    selector: (state: S) => State$1<unknown>;\n    controller: Controller;\n}\ndeclare function ExternalCacheProvider<S>({ children, store, selector, controller, }: Props<S>): JSX.Element;\n\ninterface MiddlewareAPI<R extends React.Reducer<any, any> = React.Reducer<any, any>> {\n    getState: () => React.ReducerState<R>;\n    dispatch: Dispatch<R>;\n}\ndeclare type Dispatch<R extends React.Reducer<any, any>> = (action: React.ReducerAction<R>) => Promise<void>;\ndeclare type Middleware = <R extends React.Reducer<any, any>>({ dispatch, }: MiddlewareAPI<R>) => (next: Dispatch<R>) => Dispatch<R>;\n\ndeclare const mapMiddleware: <M extends Middleware[]>(selector: (state: any) => State$1<unknown>) => (...middlewares: Middleware[]) => M;\n//# sourceMappingURL=mapMiddleware.d.ts.map\n\ndeclare const CacheProvider: typeof CacheProvider$1;\n//# sourceMappingURL=index.d.ts.map\n\n/** Use selector to access part of state */\ndeclare function useSelectionUnstable<Params extends Readonly<object> | Readonly<object>[], F extends (state: State$1<unknown>, params: Params) => any>(select: F, params: Params | null, paramSerializer?: (p: Params) => string): ReturnType<F> | null;\n\ninterface ConnectionListener {\n    isOnline: () => boolean;\n    addOnlineListener: (handler: () => void) => void;\n    removeOnlineListener: (handler: () => void) => void;\n    addOfflineListener: (handler: () => void) => void;\n    removeOfflineListener: (handler: () => void) => void;\n}\n\ndeclare let DefaultConnectionListener: {\n    new (): ConnectionListener;\n};\n\n/** Properties sent to Subscription constructor */\ninterface SubscriptionInit {\n    schema?: Schema$1 | undefined;\n    fetch: () => Promise<any>;\n    key: string;\n    getState: () => State$1<unknown>;\n    frequency?: number | undefined;\n}\n/** Interface handling a single resource subscription */\ninterface Subscription {\n    add(frequency?: number): void;\n    remove(frequency?: number): boolean;\n    cleanup(): void;\n}\n/** The static class that constructs Subscription */\ninterface SubscriptionConstructable {\n    new (init: SubscriptionInit, dispatch: Dispatch$1<any>): Subscription;\n}\n/** Handles subscription actions -> fetch or receive actions\n *\n * Constructor takes a SubscriptionConstructable class to control how\n * subscriptions are handled. (e.g., polling, websockets)\n */\ndeclare class SubscriptionManager<S extends SubscriptionConstructable> implements Manager {\n    protected subscriptions: {\n        [key: string]: InstanceType<S>;\n    };\n    protected readonly Subscription: S;\n    protected middleware: Middleware$1;\n    constructor(Subscription: S);\n    /** Ensures all subscriptions are cleaned up. */\n    cleanup(): void;\n    /** Called when middleware intercepts 'rest-hooks/subscribe' action.\n     *\n     */\n    protected handleSubscribe(action: SubscribeAction, dispatch: Dispatch$1<any>, getState: () => State$1<unknown>): void;\n    /** Called when middleware intercepts 'rest-hooks/unsubscribe' action.\n     *\n     */\n    protected handleUnsubscribe(action: UnsubscribeAction, dispatch: Dispatch$1<any>): void;\n    /** Attaches Manager to store\n     *\n     * Intercepts 'rest-hooks/subscribe'/'rest-hooks/unsubscribe' to register resources that\n     * need to be kept up to date.\n     *\n     * Will possibly dispatch 'rest-hooks/fetch' or 'rest-hooks/receive' to keep resources fresh\n     *\n     */\n    getMiddleware<T extends SubscriptionManager<any>>(this: T): Middleware$1;\n}\n\n/**\n * PollingSubscription keeps a given resource updated by\n * dispatching a fetch at a rate equal to the minimum update\n * interval requested.\n */\ndeclare class PollingSubscription implements Subscription {\n    protected readonly schema: Schema$1 | undefined;\n    protected readonly fetch: () => Promise<any>;\n    protected readonly key: string;\n    protected frequency: number;\n    protected frequencyHistogram: Map<number, number>;\n    protected dispatch: Dispatch$1<any>;\n    protected getState: () => State$1<unknown>;\n    protected intervalId?: ReturnType<typeof setInterval>;\n    protected lastIntervalId?: ReturnType<typeof setInterval>;\n    protected startId?: ReturnType<typeof setTimeout>;\n    private connectionListener;\n    constructor({ key, schema, fetch, frequency, getState }: SubscriptionInit, dispatch: Dispatch$1<any>, connectionListener?: ConnectionListener);\n    /** Subscribe to a frequency */\n    add(frequency?: number): void;\n    /** Unsubscribe from a frequency */\n    remove(frequency?: number): boolean;\n    /** Cleanup means clearing out background interval. */\n    cleanup(): void;\n    /** Trigger request for latest resource */\n    protected update(): void;\n    /** What happens when browser goes offline */\n    protected offlineListener: () => void;\n    /** What happens when browser comes online */\n    protected onlineListener: () => void;\n    /** Run polling process with current frequency\n     *\n     * Will clean up old poll interval on next run\n     */\n    protected run(): void;\n    /** Last fetch time */\n    protected lastFetchTime(): number;\n}\n\ndeclare type DevToolsConfig = {\n    [k: string]: unknown;\n    name: string;\n};\n/** Integrates with https://github.com/zalmoxisus/redux-devtools-extension\n *\n * Options: https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md\n */\ndeclare class DevToolsManager implements Manager {\n    protected middleware: Middleware$1;\n    protected devTools: undefined | any;\n    constructor(config?: DevToolsConfig, skipLogging?: (action: ActionTypes) => boolean);\n    /** Called when initial state is ready */\n    init(state: State$1<any>): void;\n    /** Ensures all subscriptions are cleaned up. */\n    cleanup(): void;\n    /** Attaches Manager to store\n     *\n     */\n    getMiddleware<T extends DevToolsManager>(this: T): Middleware$1;\n}\n\ndeclare const inferResults: typeof __INTERNAL__.inferResults;\ndeclare const RIC: (cb: (...args: any[]) => void, options: any) => void;\n\ndeclare const internal_d_inferResults: typeof inferResults;\ndeclare const internal_d_RIC: typeof RIC;\ndeclare const internal_d_initialState: typeof initialState;\ndeclare const internal_d_StateContext: typeof StateContext;\ndeclare const internal_d_DispatchContext: typeof DispatchContext;\ndeclare const internal_d_hasUsableData: typeof hasUsableData;\ndeclare namespace internal_d {\n  export {\n    internal_d_inferResults as inferResults,\n    internal_d_RIC as RIC,\n    internal_d_initialState as initialState,\n    internal_d_StateContext as StateContext,\n    internal_d_DispatchContext as DispatchContext,\n    internal_d_hasUsableData as hasUsableData,\n  };\n}\n\nexport { ArrayElement, CacheProvider, ConnectionListener, DefaultConnectionListener, Denormalize, DenormalizeNullable, DevToolsConfig, DevToolsManager, Endpoint, EndpointExtraOptions, EndpointInterface, EndpointParam, ExternalCacheProvider, FetchFunction, EndpointExtraOptions as FetchOptions, Index, IndexParams, MutateEndpoint, NetworkError, NetworkErrorBoundary, Normalize, NormalizeNullable, PollingSubscription, PromiseifyMiddleware, ReadEndpoint, ResolveType, Schema, SubscriptionManager, internal_d as __INTERNAL__, mapMiddleware, useSelectionUnstable };\n"},13411:e=>{function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=()=>[],n.resolve=n,n.id=13411,e.exports=n},62715:()=>{},13611:()=>{},43454:()=>{}}]);