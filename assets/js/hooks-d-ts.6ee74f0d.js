(self.webpackChunk=self.webpackChunk||[]).push([[22595],{56890:n=>{n.exports="import { EndpointInterface, EndpointParam } from '@rest-hooks/endpoint';\n\n/**\n * Keeps value updated after delay time\n *\n * @see https://resthooks.io/docs/api/useDebounce\n * @param value Any immutable value\n * @param delay Time in miliseconds to wait til updating the value\n * @param updatable Whether to update at all\n * @example\n ```\n const debouncedFilter = useDebounced(filter, 200);\n const list = useResource(ListShape, { filter });\n ```\n */\ndeclare function useDebounce<T>(\n  value: T,\n  delay: number,\n  updatable?: boolean,\n): T;\n\n/**\n * Builds an Endpoint that cancels fetch everytime params change\n *\n * @see https://resthooks.io/docs/api/useCancelling\n * @example\n ```\n useResource(useCancelling(MyEndpoint, { id }), { id })\n ```\n */\ndeclare function useCancelling<\n  E extends EndpointInterface & {\n    extend: (o: { signal?: AbortSignal }) => any;\n  },\n>(endpoint: E, params: EndpointParam<E> | null): E;\n\n/**\n * Takes an async function and tracks resolution as a boolean.\n *\n * @see https://resthooks.io/docs/api/useLoading\n * @param func A function returning a promise\n * @param deps Deps list sent to useCallback()\n * @example\n ```\n function Button({ onClick, children, ...props }) {\n   const [clickHandler, loading] = useLoading(onClick);\n   return (\n     <button onClick={clickHandler} {...props}>\n       {loading ? 'Loading...' : children}\n     </button>\n   );\n }\n ```\n */\ndeclare function useLoading<F extends (...args: any) => Promise<any>>(\n  func: F,\n  deps?: readonly any[],\n): [F, boolean, Error | undefined];\n\nexport { useCancelling, useDebounce, useLoading };\n"}}]);